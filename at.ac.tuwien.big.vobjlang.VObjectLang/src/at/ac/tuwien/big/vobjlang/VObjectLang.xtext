// automatically generated by Xtext
grammar at.ac.tuwien.big.vobjlang.VObjectLang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/VObjectModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


 
CompleteFile returns CompleteFile:
	{CompleteFile}
	('CompleteFile'
	'{'
		('virtModels' '{' virtModels+=EString ( "," virtModels+=EString)* '}' )?
		('inputModels' '{' inputModels+=EString ( "," inputModels+=EString)* '}' )?
		('lastModelText' lastModelText=EString)?
		('currentModelText' currentModelText=EString)?
		('deltamodel' deltamodel=VObjDeltaModel)?
		('xtextlanguage' xtextlanguage=LanguageDef)?
		('ecoredef' '{' ecoredef+=EcoreDef ( "," ecoredef+=EcoreDef)* '}' )?
		('rootObjects' '{' rootObjects+=Identifier ( "," rootObjects+=Identifier)* '}' )?
	'}') | (rootObjects+=Identifier);





Function returns Function:
	BasicFunction;


AnyValue returns AnyValue:
	IdentifierRef | IdentifierCmp | JavaValue;






IdentifierRefOrCmp returns IdentifierRefOrCmp:
	IdentifierRefOrCmp_Impl | IdentifierRef | IdentifierCmp;

EString returns ecore::EString:
	STRING | ID;

VObjDeltaModel returns VObjDeltaModel:
	{VObjDeltaModel}
	'VObjDeltaModel'
	'{'
		('functions' '{' functions+=Function ( "," functions+=Function)* '}' )?
		('storedfuncs' '{' storedfuncs+=StoredFuncs ( "," storedfuncs+=StoredFuncs)* '}' )?
		('identifiers' '{' identifiers+=Identifier ( "," identifiers+=Identifier)* '}' )?
	'}';

LanguageDef returns LanguageDef:
	{LanguageDef}
	'LanguageDef'
	'{'
		('langStandaloneSetup' langStandaloneSetup=EString)?
	'}';

EcoreDef returns EcoreDef:
	{EcoreDef}
	'EcoreDef'
	'{'
		('factoryPackage' factoryPackage=EString)?
		('packagePackage' packagePackage=EString)?
	'}';

Identifier returns Identifier:
	creatorid=CreatorId ('@' name=EString)? '(' identifierreforcmp+=AnyValue ( "," identifierreforcmp+=AnyValue)* ')';


StoredFuncs returns StoredFuncs:
	{StoredFuncs}
	'StoredFuncs'
	'{'
		('identifier' identifier=Identifier)?
		('featurefunc' '{' featurefunc+=FeatureFunc ( "," featurefunc+=FeatureFunc)* '}' )?
	'}';

BasicFunction returns BasicFunction:
	{BasicFunction}
	'BasicFunction'
	'{'
		('values' '{' values+=ValuePair ( "," values+=ValuePair)* '}' )?
	'}';

ValuePair returns ValuePair:
	{ValuePair}
	'ValuePair'
	'{'
		('key' key=EJavaObject)?
		('value' value=EJavaObject)?
		('identifierValue' identifierValue=[Identifier|EString])?
	'}';

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

FeatureFunc returns FeatureFunc:
	{FeatureFunc}
	'FeatureFunc'
	name=EString
	'{'
		('classref' classref=EString)?
		('nsref' nsref=EString)?
		('deltastore' deltastore=DeltaStore)?
	'}';

DeltaStore returns DeltaStore:
	{DeltaStore}
	'DeltaStore'
	'{'
		('addMap' addMap=[BasicFunction|EString])?
		('filterScope' filterScope=[BasicFunction|EString])?
	'}';

AnyValue_Impl returns AnyValue:
	{AnyValue}
	'AnyValue'
	;

CreatorId returns CreatorId:
	{CreatorId}
	name=ID ('in' namespace=EString)?;

EInt returns ecore::EInt:
	'-'? INT;

IdentifierRefOrCmp_Impl returns IdentifierRefOrCmp:
	{IdentifierRefOrCmp}
	'IdentifierRefOrCmp'
	;

IdentifierRef returns IdentifierRef:
	{IdentifierRef}
	'@' s_identifier=[Identifier|EString];

IdentifierCmp returns IdentifierCmp:
	{IdentifierCmp}
	s_identifier=Identifier;

JavaValue returns JavaValue:
	{JavaValue}
	value=EString;
