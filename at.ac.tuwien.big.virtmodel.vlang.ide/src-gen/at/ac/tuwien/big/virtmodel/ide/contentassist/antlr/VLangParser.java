/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.virtmodel.ide.contentassist.antlr;

import at.ac.tuwien.big.virtmodel.ide.contentassist.antlr.internal.InternalVLangParser;
import at.ac.tuwien.big.virtmodel.services.VLangGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class VLangParser extends AbstractContentAssistParser {

	@Inject
	private VLangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalVLangParser createParser() {
		InternalVLangParser result = new InternalVLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAssignStatementAccess().getAlternatives_0(), "rule__AssignStatement__Alternatives_0");
					put(grammarAccess.getSetOrFunctionDefAccess().getAlternatives(), "rule__SetOrFunctionDef__Alternatives");
					put(grammarAccess.getRuleAssignmentAccess().getAlternatives_4(), "rule__RuleAssignment__Alternatives_4");
					put(grammarAccess.getFunctionScopeAccess().getAlternatives_0(), "rule__FunctionScope__Alternatives_0");
					put(grammarAccess.getSetScopeAccess().getAlternatives_1(), "rule__SetScope__Alternatives_1");
					put(grammarAccess.getSingleValueAccess().getAlternatives(), "rule__SingleValue__Alternatives");
					put(grammarAccess.getFixedValueAccess().getAlternatives(), "rule__FixedValue__Alternatives");
					put(grammarAccess.getFunctionAssignmentAccess().getAlternatives(), "rule__FunctionAssignment__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBlockAccess().getAlternatives_2(), "rule__Block__Alternatives_2");
					put(grammarAccess.getSingleStatementAccess().getAlternatives(), "rule__SingleStatement__Alternatives");
					put(grammarAccess.getCalculatedValueAccess().getAlternatives(), "rule__CalculatedValue__Alternatives");
					put(grammarAccess.getObjParamAccess().getAlternatives(), "rule__ObjParam__Alternatives");
					put(grammarAccess.getFunctionTypeAccess().getAlternatives(), "rule__FunctionType__Alternatives");
					put(grammarAccess.getJavaFunctionTypeAccess().getAlternatives(), "rule__JavaFunctionType__Alternatives");
					put(grammarAccess.getVLangAccess().getGroup(), "rule__VLang__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getAssignStatementAccess().getGroup(), "rule__AssignStatement__Group__0");
					put(grammarAccess.getFunctionDefAccess().getGroup(), "rule__FunctionDef__Group__0");
					put(grammarAccess.getFunctionDefAccess().getGroup_6(), "rule__FunctionDef__Group_6__0");
					put(grammarAccess.getJavaFunctionDefAccess().getGroup(), "rule__JavaFunctionDef__Group__0");
					put(grammarAccess.getBasicActionAccess().getGroup(), "rule__BasicAction__Group__0");
					put(grammarAccess.getSetDefAccess().getGroup(), "rule__SetDef__Group__0");
					put(grammarAccess.getSetDefAccess().getGroup_2(), "rule__SetDef__Group_2__0");
					put(grammarAccess.getSetLiteralAccess().getGroup(), "rule__SetLiteral__Group__0");
					put(grammarAccess.getSetLiteralAccess().getGroup_2(), "rule__SetLiteral__Group_2__0");
					put(grammarAccess.getSetLiteralAccess().getGroup_2_1(), "rule__SetLiteral__Group_2_1__0");
					put(grammarAccess.getRuleAssignmentAccess().getGroup(), "rule__RuleAssignment__Group__0");
					put(grammarAccess.getDeleteAssignmentAccess().getGroup(), "rule__DeleteAssignment__Group__0");
					put(grammarAccess.getFunctionScopeAccess().getGroup(), "rule__FunctionScope__Group__0");
					put(grammarAccess.getFunctionScopeAccess().getGroup_1(), "rule__FunctionScope__Group_1__0");
					put(grammarAccess.getInfiniteScopeAccess().getGroup(), "rule__InfiniteScope__Group__0");
					put(grammarAccess.getFunctionDomainScopeAccess().getGroup(), "rule__FunctionDomainScope__Group__0");
					put(grammarAccess.getSetScopeAccess().getGroup(), "rule__SetScope__Group__0");
					put(grammarAccess.getFullFunctionAssignmentAccess().getGroup(), "rule__FullFunctionAssignment__Group__0");
					put(grammarAccess.getFullFunctionAssignmentAccess().getGroup_0(), "rule__FullFunctionAssignment__Group_0__0");
					put(grammarAccess.getOclFunctionAccess().getGroup(), "rule__OclFunction__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getBlockAccess().getGroup_2_0(), "rule__Block__Group_2_0__0");
					put(grammarAccess.getLetStatementAccess().getGroup(), "rule__LetStatement__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getForLoopStatementAccess().getGroup(), "rule__ForLoopStatement__Group__0");
					put(grammarAccess.getMaybeValueAccess().getGroup(), "rule__MaybeValue__Group__0");
					put(grammarAccess.getParDefAccess().getGroup(), "rule__ParDef__Group__0");
					put(grammarAccess.getParDefAccess().getGroup_2(), "rule__ParDef__Group_2__0");
					put(grammarAccess.getParDefAccess().getGroup_2_1(), "rule__ParDef__Group_2_1__0");
					put(grammarAccess.getFunctionParDefAccess().getGroup(), "rule__FunctionParDef__Group__0");
					put(grammarAccess.getFunctionParDefAccess().getGroup_1(), "rule__FunctionParDef__Group_1__0");
					put(grammarAccess.getIfThenElseAccess().getGroup(), "rule__IfThenElse__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getJavaFunctionCallAccess().getGroup(), "rule__JavaFunctionCall__Group__0");
					put(grammarAccess.getFunctionParsAccess().getGroup(), "rule__FunctionPars__Group__0");
					put(grammarAccess.getFunctionParsAccess().getGroup_1(), "rule__FunctionPars__Group_1__0");
					put(grammarAccess.getFunctionParsAccess().getGroup_1_1(), "rule__FunctionPars__Group_1_1__0");
					put(grammarAccess.getObjIdAccess().getGroup(), "rule__ObjId__Group__0");
					put(grammarAccess.getObjIdAccess().getGroup_2(), "rule__ObjId__Group_2__0");
					put(grammarAccess.getObjIdAccess().getGroup_2_1(), "rule__ObjId__Group_2_1__0");
					put(grammarAccess.getObjIdAccess().getGroup_2_1_1(), "rule__ObjId__Group_2_1_1__0");
					put(grammarAccess.getObjParamAccess().getGroup_2(), "rule__ObjParam__Group_2__0");
					put(grammarAccess.getObjParamAccess().getGroup_2_1(), "rule__ObjParam__Group_2_1__0");
					put(grammarAccess.getObjParamAccess().getGroup_2_1_1(), "rule__ObjParam__Group_2_1_1__0");
					put(grammarAccess.getObjParamAccess().getGroup_2_1_1_1(), "rule__ObjParam__Group_2_1_1_1__0");
					put(grammarAccess.getVLangAccess().getImportsAssignment_0(), "rule__VLang__ImportsAssignment_0");
					put(grammarAccess.getVLangAccess().getStatementAssignment_1(), "rule__VLang__StatementAssignment_1");
					put(grammarAccess.getImportAccess().getTargetAssignment_1(), "rule__Import__TargetAssignment_1");
					put(grammarAccess.getFunctionDefAccess().getTypeAssignment_0(), "rule__FunctionDef__TypeAssignment_0");
					put(grammarAccess.getFunctionDefAccess().getNameAssignment_2(), "rule__FunctionDef__NameAssignment_2");
					put(grammarAccess.getFunctionDefAccess().getInitAssignment_5(), "rule__FunctionDef__InitAssignment_5");
					put(grammarAccess.getFunctionDefAccess().getFullAssignmentAssignment_6_1(), "rule__FunctionDef__FullAssignmentAssignment_6_1");
					put(grammarAccess.getJavaFunctionDefAccess().getTypeAssignment_0(), "rule__JavaFunctionDef__TypeAssignment_0");
					put(grammarAccess.getJavaFunctionDefAccess().getNameAssignment_1(), "rule__JavaFunctionDef__NameAssignment_1");
					put(grammarAccess.getJavaFunctionDefAccess().getJavaFuncAssignment_3(), "rule__JavaFunctionDef__JavaFuncAssignment_3");
					put(grammarAccess.getBasicActionAccess().getThingAssignment_0(), "rule__BasicAction__ThingAssignment_0");
					put(grammarAccess.getBasicActionAccess().getCalledFuncAssignment_2(), "rule__BasicAction__CalledFuncAssignment_2");
					put(grammarAccess.getSetDefAccess().getNameAssignment_1(), "rule__SetDef__NameAssignment_1");
					put(grammarAccess.getSetDefAccess().getLiteralAssignment_2_1(), "rule__SetDef__LiteralAssignment_2_1");
					put(grammarAccess.getSetLiteralAccess().getValuesAssignment_2_0(), "rule__SetLiteral__ValuesAssignment_2_0");
					put(grammarAccess.getSetLiteralAccess().getValuesAssignment_2_1_1(), "rule__SetLiteral__ValuesAssignment_2_1_1");
					put(grammarAccess.getRuleAssignmentAccess().getFunctionAssignment_0(), "rule__RuleAssignment__FunctionAssignment_0");
					put(grammarAccess.getRuleAssignmentAccess().getScopeAssignment_2(), "rule__RuleAssignment__ScopeAssignment_2");
					put(grammarAccess.getRuleAssignmentAccess().getIsFiniteAssignment_4_0(), "rule__RuleAssignment__IsFiniteAssignment_4_0");
					put(grammarAccess.getRuleAssignmentAccess().getIsDeriveAssignment_4_1(), "rule__RuleAssignment__IsDeriveAssignment_4_1");
					put(grammarAccess.getRuleAssignmentAccess().getIsConstraintAssignment_4_2(), "rule__RuleAssignment__IsConstraintAssignment_4_2");
					put(grammarAccess.getRuleAssignmentAccess().getAssignmentAssignment_5(), "rule__RuleAssignment__AssignmentAssignment_5");
					put(grammarAccess.getDeleteAssignmentAccess().getFunctionAssignment_1(), "rule__DeleteAssignment__FunctionAssignment_1");
					put(grammarAccess.getDeleteAssignmentAccess().getScopeAssignment_3(), "rule__DeleteAssignment__ScopeAssignment_3");
					put(grammarAccess.getFunctionScopeAccess().getFilterAssignment_1_1(), "rule__FunctionScope__FilterAssignment_1_1");
					put(grammarAccess.getFunctionDomainScopeAccess().getFunctionAssignment_1(), "rule__FunctionDomainScope__FunctionAssignment_1");
					put(grammarAccess.getSetScopeAccess().getSetRefAssignment_1_0(), "rule__SetScope__SetRefAssignment_1_0");
					put(grammarAccess.getSetScopeAccess().getSetAssignment_1_1(), "rule__SetScope__SetAssignment_1_1");
					put(grammarAccess.getSingleScopeAccess().getValueAssignment(), "rule__SingleScope__ValueAssignment");
					put(grammarAccess.getFixedValueAccess().getNumberAssignment_0(), "rule__FixedValue__NumberAssignment_0");
					put(grammarAccess.getFixedValueAccess().getStringAssignment_1(), "rule__FixedValue__StringAssignment_1");
					put(grammarAccess.getFixedValueAccess().getObjidAssignment_2(), "rule__FixedValue__ObjidAssignment_2");
					put(grammarAccess.getFullFunctionAssignmentAccess().getParametersAssignment_0_0(), "rule__FullFunctionAssignment__ParametersAssignment_0_0");
					put(grammarAccess.getFullFunctionAssignmentAccess().getExprAssignment_1(), "rule__FullFunctionAssignment__ExprAssignment_1");
					put(grammarAccess.getOclFunctionAccess().getOclFuncAssignment_1(), "rule__OclFunction__OclFuncAssignment_1");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_2_0_0(), "rule__Block__StatementsAssignment_2_0_0");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_2_1(), "rule__Block__StatementsAssignment_2_1");
					put(grammarAccess.getLetStatementAccess().getNameAssignment_1(), "rule__LetStatement__NameAssignment_1");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_2(), "rule__IfStatement__ConditionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getThenStatementAssignment_4(), "rule__IfStatement__ThenStatementAssignment_4");
					put(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1(), "rule__IfStatement__ElseStatementAssignment_5_1");
					put(grammarAccess.getForStatementAccess().getInitVarAssignment_2(), "rule__ForStatement__InitVarAssignment_2");
					put(grammarAccess.getForStatementAccess().getConditionAssignment_4(), "rule__ForStatement__ConditionAssignment_4");
					put(grammarAccess.getForStatementAccess().getEndProcessingAssignment_6(), "rule__ForStatement__EndProcessingAssignment_6");
					put(grammarAccess.getForStatementAccess().getLoopExprAssignment_8(), "rule__ForStatement__LoopExprAssignment_8");
					put(grammarAccess.getForLoopStatementAccess().getNameAssignment_2(), "rule__ForLoopStatement__NameAssignment_2");
					put(grammarAccess.getForLoopStatementAccess().getValueAssignment_4(), "rule__ForLoopStatement__ValueAssignment_4");
					put(grammarAccess.getForLoopStatementAccess().getLoopExprAssignment_6(), "rule__ForLoopStatement__LoopExprAssignment_6");
					put(grammarAccess.getMaybeValueAccess().getValueAssignment_1(), "rule__MaybeValue__ValueAssignment_1");
					put(grammarAccess.getParDefAccess().getParamsAssignment_2_0(), "rule__ParDef__ParamsAssignment_2_0");
					put(grammarAccess.getParDefAccess().getParamsAssignment_2_1_1(), "rule__ParDef__ParamsAssignment_2_1_1");
					put(grammarAccess.getFunctionParDefAccess().getNameAssignment_0(), "rule__FunctionParDef__NameAssignment_0");
					put(grammarAccess.getFunctionParDefAccess().getTypeAssignment_1_1(), "rule__FunctionParDef__TypeAssignment_1_1");
					put(grammarAccess.getIfThenElseAccess().getConditionAssignment_1(), "rule__IfThenElse__ConditionAssignment_1");
					put(grammarAccess.getIfThenElseAccess().getThenExprAssignment_3(), "rule__IfThenElse__ThenExprAssignment_3");
					put(grammarAccess.getIfThenElseAccess().getElseExprAssignment_5(), "rule__IfThenElse__ElseExprAssignment_5");
					put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0(), "rule__FunctionCall__FunctionAssignment_0");
					put(grammarAccess.getJavaFunctionCallAccess().getFunctionAssignment_1(), "rule__JavaFunctionCall__FunctionAssignment_1");
					put(grammarAccess.getFunctionParsAccess().getParamsAssignment_1_0(), "rule__FunctionPars__ParamsAssignment_1_0");
					put(grammarAccess.getFunctionParsAccess().getParamsAssignment_1_1_1(), "rule__FunctionPars__ParamsAssignment_1_1_1");
					put(grammarAccess.getObjIdAccess().getNameAssignment_1(), "rule__ObjId__NameAssignment_1");
					put(grammarAccess.getObjIdAccess().getParamsAssignment_2_1_0(), "rule__ObjId__ParamsAssignment_2_1_0");
					put(grammarAccess.getObjIdAccess().getParamsAssignment_2_1_1_1(), "rule__ObjId__ParamsAssignment_2_1_1_1");
					put(grammarAccess.getObjParamAccess().getNumberAssignment_0(), "rule__ObjParam__NumberAssignment_0");
					put(grammarAccess.getObjParamAccess().getStringAssignment_1(), "rule__ObjParam__StringAssignment_1");
					put(grammarAccess.getObjParamAccess().getNameAssignment_2_0(), "rule__ObjParam__NameAssignment_2_0");
					put(grammarAccess.getObjParamAccess().getParamsAssignment_2_1_1_0(), "rule__ObjParam__ParamsAssignment_2_1_1_0");
					put(grammarAccess.getObjParamAccess().getParamsAssignment_2_1_1_1_1(), "rule__ObjParam__ParamsAssignment_2_1_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public VLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(VLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
