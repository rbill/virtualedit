/*
 * generated by Xtext 2.11.0
 */
grammar InternalVLang;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package at.ac.tuwien.big.virtmodel.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.ac.tuwien.big.virtmodel.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import at.ac.tuwien.big.virtmodel.services.VLangGrammarAccess;

}
@parser::members {
	private VLangGrammarAccess grammarAccess;

	public void setGrammarAccess(VLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleVLang
entryRuleVLang
:
{ before(grammarAccess.getVLangRule()); }
	 ruleVLang
{ after(grammarAccess.getVLangRule()); } 
	 EOF 
;

// Rule VLang
ruleVLang 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLangAccess().getGroup()); }
		(rule__VLang__Group__0)
		{ after(grammarAccess.getVLangAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignStatement
entryRuleAssignStatement
:
{ before(grammarAccess.getAssignStatementRule()); }
	 ruleAssignStatement
{ after(grammarAccess.getAssignStatementRule()); } 
	 EOF 
;

// Rule AssignStatement
ruleAssignStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignStatementAccess().getGroup()); }
		(rule__AssignStatement__Group__0)
		{ after(grammarAccess.getAssignStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetOrFunctionDef
entryRuleSetOrFunctionDef
:
{ before(grammarAccess.getSetOrFunctionDefRule()); }
	 ruleSetOrFunctionDef
{ after(grammarAccess.getSetOrFunctionDefRule()); } 
	 EOF 
;

// Rule SetOrFunctionDef
ruleSetOrFunctionDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetOrFunctionDefAccess().getAlternatives()); }
		(rule__SetOrFunctionDef__Alternatives)
		{ after(grammarAccess.getSetOrFunctionDefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDef
entryRuleFunctionDef
:
{ before(grammarAccess.getFunctionDefRule()); }
	 ruleFunctionDef
{ after(grammarAccess.getFunctionDefRule()); } 
	 EOF 
;

// Rule FunctionDef
ruleFunctionDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDefAccess().getGroup()); }
		(rule__FunctionDef__Group__0)
		{ after(grammarAccess.getFunctionDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJavaFunctionDef
entryRuleJavaFunctionDef
:
{ before(grammarAccess.getJavaFunctionDefRule()); }
	 ruleJavaFunctionDef
{ after(grammarAccess.getJavaFunctionDefRule()); } 
	 EOF 
;

// Rule JavaFunctionDef
ruleJavaFunctionDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJavaFunctionDefAccess().getGroup()); }
		(rule__JavaFunctionDef__Group__0)
		{ after(grammarAccess.getJavaFunctionDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicAction
entryRuleBasicAction
:
{ before(grammarAccess.getBasicActionRule()); }
	 ruleBasicAction
{ after(grammarAccess.getBasicActionRule()); } 
	 EOF 
;

// Rule BasicAction
ruleBasicAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicActionAccess().getGroup()); }
		(rule__BasicAction__Group__0)
		{ after(grammarAccess.getBasicActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetDef
entryRuleSetDef
:
{ before(grammarAccess.getSetDefRule()); }
	 ruleSetDef
{ after(grammarAccess.getSetDefRule()); } 
	 EOF 
;

// Rule SetDef
ruleSetDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetDefAccess().getGroup()); }
		(rule__SetDef__Group__0)
		{ after(grammarAccess.getSetDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetLiteral
entryRuleSetLiteral
:
{ before(grammarAccess.getSetLiteralRule()); }
	 ruleSetLiteral
{ after(grammarAccess.getSetLiteralRule()); } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetLiteralAccess().getGroup()); }
		(rule__SetLiteral__Group__0)
		{ after(grammarAccess.getSetLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleAssignment
entryRuleRuleAssignment
:
{ before(grammarAccess.getRuleAssignmentRule()); }
	 ruleRuleAssignment
{ after(grammarAccess.getRuleAssignmentRule()); } 
	 EOF 
;

// Rule RuleAssignment
ruleRuleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getGroup()); }
		(rule__RuleAssignment__Group__0)
		{ after(grammarAccess.getRuleAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeleteAssignment
entryRuleDeleteAssignment
:
{ before(grammarAccess.getDeleteAssignmentRule()); }
	 ruleDeleteAssignment
{ after(grammarAccess.getDeleteAssignmentRule()); } 
	 EOF 
;

// Rule DeleteAssignment
ruleDeleteAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteAssignmentAccess().getGroup()); }
		(rule__DeleteAssignment__Group__0)
		{ after(grammarAccess.getDeleteAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionScope
entryRuleFunctionScope
:
{ before(grammarAccess.getFunctionScopeRule()); }
	 ruleFunctionScope
{ after(grammarAccess.getFunctionScopeRule()); } 
	 EOF 
;

// Rule FunctionScope
ruleFunctionScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionScopeAccess().getGroup()); }
		(rule__FunctionScope__Group__0)
		{ after(grammarAccess.getFunctionScopeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInfiniteScope
entryRuleInfiniteScope
:
{ before(grammarAccess.getInfiniteScopeRule()); }
	 ruleInfiniteScope
{ after(grammarAccess.getInfiniteScopeRule()); } 
	 EOF 
;

// Rule InfiniteScope
ruleInfiniteScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfiniteScopeAccess().getGroup()); }
		(rule__InfiniteScope__Group__0)
		{ after(grammarAccess.getInfiniteScopeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilter
entryRuleFilter
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterAccess().getFunctionAssignmentParserRuleCall()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getFilterAccess().getFunctionAssignmentParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDomainScope
entryRuleFunctionDomainScope
:
{ before(grammarAccess.getFunctionDomainScopeRule()); }
	 ruleFunctionDomainScope
{ after(grammarAccess.getFunctionDomainScopeRule()); } 
	 EOF 
;

// Rule FunctionDomainScope
ruleFunctionDomainScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDomainScopeAccess().getGroup()); }
		(rule__FunctionDomainScope__Group__0)
		{ after(grammarAccess.getFunctionDomainScopeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetScope
entryRuleSetScope
:
{ before(grammarAccess.getSetScopeRule()); }
	 ruleSetScope
{ after(grammarAccess.getSetScopeRule()); } 
	 EOF 
;

// Rule SetScope
ruleSetScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetScopeAccess().getGroup()); }
		(rule__SetScope__Group__0)
		{ after(grammarAccess.getSetScopeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleScope
entryRuleSingleScope
:
{ before(grammarAccess.getSingleScopeRule()); }
	 ruleSingleScope
{ after(grammarAccess.getSingleScopeRule()); } 
	 EOF 
;

// Rule SingleScope
ruleSingleScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleScopeAccess().getValueAssignment()); }
		(rule__SingleScope__ValueAssignment)
		{ after(grammarAccess.getSingleScopeAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleValue
entryRuleSingleValue
:
{ before(grammarAccess.getSingleValueRule()); }
	 ruleSingleValue
{ after(grammarAccess.getSingleValueRule()); } 
	 EOF 
;

// Rule SingleValue
ruleSingleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleValueAccess().getAlternatives()); }
		(rule__SingleValue__Alternatives)
		{ after(grammarAccess.getSingleValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFixedValue
entryRuleFixedValue
:
{ before(grammarAccess.getFixedValueRule()); }
	 ruleFixedValue
{ after(grammarAccess.getFixedValueRule()); } 
	 EOF 
;

// Rule FixedValue
ruleFixedValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFixedValueAccess().getAlternatives()); }
		(rule__FixedValue__Alternatives)
		{ after(grammarAccess.getFixedValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionAssignment
entryRuleFunctionAssignment
:
{ before(grammarAccess.getFunctionAssignmentRule()); }
	 ruleFunctionAssignment
{ after(grammarAccess.getFunctionAssignmentRule()); } 
	 EOF 
;

// Rule FunctionAssignment
ruleFunctionAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAssignmentAccess().getAlternatives()); }
		(rule__FunctionAssignment__Alternatives)
		{ after(grammarAccess.getFunctionAssignmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFullFunctionAssignment
entryRuleFullFunctionAssignment
:
{ before(grammarAccess.getFullFunctionAssignmentRule()); }
	 ruleFullFunctionAssignment
{ after(grammarAccess.getFullFunctionAssignmentRule()); } 
	 EOF 
;

// Rule FullFunctionAssignment
ruleFullFunctionAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullFunctionAssignmentAccess().getGroup()); }
		(rule__FullFunctionAssignment__Group__0)
		{ after(grammarAccess.getFullFunctionAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicExpression
entryRuleBasicExpression
:
{ before(grammarAccess.getBasicExpressionRule()); }
	 ruleBasicExpression
{ after(grammarAccess.getBasicExpressionRule()); } 
	 EOF 
;

// Rule BasicExpression
ruleBasicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicExpressionAccess().getAlternatives()); }
		(rule__BasicExpression__Alternatives)
		{ after(grammarAccess.getBasicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOclFunction
entryRuleOclFunction
:
{ before(grammarAccess.getOclFunctionRule()); }
	 ruleOclFunction
{ after(grammarAccess.getOclFunctionRule()); } 
	 EOF 
;

// Rule OclFunction
ruleOclFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOclFunctionAccess().getGroup()); }
		(rule__OclFunction__Group__0)
		{ after(grammarAccess.getOclFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFullFunction
entryRuleFullFunction
:
{ before(grammarAccess.getFullFunctionRule()); }
	 ruleFullFunction
{ after(grammarAccess.getFullFunctionRule()); } 
	 EOF 
;

// Rule FullFunction
ruleFullFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullFunctionAccess().getBlockParserRuleCall()); }
		ruleBlock
		{ after(grammarAccess.getFullFunctionAccess().getBlockParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleStatement
entryRuleSingleStatement
:
{ before(grammarAccess.getSingleStatementRule()); }
	 ruleSingleStatement
{ after(grammarAccess.getSingleStatementRule()); } 
	 EOF 
;

// Rule SingleStatement
ruleSingleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleStatementAccess().getAlternatives()); }
		(rule__SingleStatement__Alternatives)
		{ after(grammarAccess.getSingleStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetStatement
entryRuleLetStatement
:
{ before(grammarAccess.getLetStatementRule()); }
	 ruleLetStatement
{ after(grammarAccess.getLetStatementRule()); } 
	 EOF 
;

// Rule LetStatement
ruleLetStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetStatementAccess().getGroup()); }
		(rule__LetStatement__Group__0)
		{ after(grammarAccess.getLetStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
		(rule__ReturnStatement__Group__0)
		{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup()); }
		(rule__ForStatement__Group__0)
		{ after(grammarAccess.getForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoopStatement
entryRuleForLoopStatement
:
{ before(grammarAccess.getForLoopStatementRule()); }
	 ruleForLoopStatement
{ after(grammarAccess.getForLoopStatementRule()); } 
	 EOF 
;

// Rule ForLoopStatement
ruleForLoopStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopStatementAccess().getGroup()); }
		(rule__ForLoopStatement__Group__0)
		{ after(grammarAccess.getForLoopStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule MaybeValue
ruleMaybeValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaybeValueAccess().getGroup()); }
		(rule__MaybeValue__Group__0)
		{ after(grammarAccess.getMaybeValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParDef
entryRuleParDef
:
{ before(grammarAccess.getParDefRule()); }
	 ruleParDef
{ after(grammarAccess.getParDefRule()); } 
	 EOF 
;

// Rule ParDef
ruleParDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParDefAccess().getGroup()); }
		(rule__ParDef__Group__0)
		{ after(grammarAccess.getParDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionParDef
entryRuleFunctionParDef
:
{ before(grammarAccess.getFunctionParDefRule()); }
	 ruleFunctionParDef
{ after(grammarAccess.getFunctionParDefRule()); } 
	 EOF 
;

// Rule FunctionParDef
ruleFunctionParDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionParDefAccess().getGroup()); }
		(rule__FunctionParDef__Group__0)
		{ after(grammarAccess.getFunctionParDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalculatedValue
entryRuleCalculatedValue
:
{ before(grammarAccess.getCalculatedValueRule()); }
	 ruleCalculatedValue
{ after(grammarAccess.getCalculatedValueRule()); } 
	 EOF 
;

// Rule CalculatedValue
ruleCalculatedValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculatedValueAccess().getAlternatives()); }
		(rule__CalculatedValue__Alternatives)
		{ after(grammarAccess.getCalculatedValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfThenElse
entryRuleIfThenElse
:
{ before(grammarAccess.getIfThenElseRule()); }
	 ruleIfThenElse
{ after(grammarAccess.getIfThenElseRule()); } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfThenElseAccess().getGroup()); }
		(rule__IfThenElse__Group__0)
		{ after(grammarAccess.getIfThenElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJavaFunctionCall
entryRuleJavaFunctionCall
:
{ before(grammarAccess.getJavaFunctionCallRule()); }
	 ruleJavaFunctionCall
{ after(grammarAccess.getJavaFunctionCallRule()); } 
	 EOF 
;

// Rule JavaFunctionCall
ruleJavaFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJavaFunctionCallAccess().getGroup()); }
		(rule__JavaFunctionCall__Group__0)
		{ after(grammarAccess.getJavaFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule FunctionPars
ruleFunctionPars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionParsAccess().getGroup()); }
		(rule__FunctionPars__Group__0)
		{ after(grammarAccess.getFunctionParsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionPar
entryRuleFunctionPar
:
{ before(grammarAccess.getFunctionParRule()); }
	 ruleFunctionPar
{ after(grammarAccess.getFunctionParRule()); } 
	 EOF 
;

// Rule FunctionPar
ruleFunctionPar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionParAccess().getSingleValueParserRuleCall()); }
		ruleSingleValue
		{ after(grammarAccess.getFunctionParAccess().getSingleValueParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjId
entryRuleObjId
:
{ before(grammarAccess.getObjIdRule()); }
	 ruleObjId
{ after(grammarAccess.getObjIdRule()); } 
	 EOF 
;

// Rule ObjId
ruleObjId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjIdAccess().getGroup()); }
		(rule__ObjId__Group__0)
		{ after(grammarAccess.getObjIdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjParam
entryRuleObjParam
:
{ before(grammarAccess.getObjParamRule()); }
	 ruleObjParam
{ after(grammarAccess.getObjParamRule()); } 
	 EOF 
;

// Rule ObjParam
ruleObjParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjParamAccess().getAlternatives()); }
		(rule__ObjParam__Alternatives)
		{ after(grammarAccess.getObjParamAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FunctionType
ruleFunctionType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getAlternatives()); }
		(rule__FunctionType__Alternatives)
		{ after(grammarAccess.getFunctionTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule JavaFunctionType
ruleJavaFunctionType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaFunctionTypeAccess().getAlternatives()); }
		(rule__JavaFunctionType__Alternatives)
		{ after(grammarAccess.getJavaFunctionTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignStatementAccess().getJavaFunctionDefParserRuleCall_0_0()); }
		ruleJavaFunctionDef
		{ after(grammarAccess.getAssignStatementAccess().getJavaFunctionDefParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignStatementAccess().getSetOrFunctionDefParserRuleCall_0_1()); }
		ruleSetOrFunctionDef
		{ after(grammarAccess.getAssignStatementAccess().getSetOrFunctionDefParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignStatementAccess().getRuleAssignmentParserRuleCall_0_2()); }
		ruleRuleAssignment
		{ after(grammarAccess.getAssignStatementAccess().getRuleAssignmentParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssignStatementAccess().getBasicActionParserRuleCall_0_3()); }
		ruleBasicAction
		{ after(grammarAccess.getAssignStatementAccess().getBasicActionParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getAssignStatementAccess().getDeleteAssignmentParserRuleCall_0_4()); }
		ruleDeleteAssignment
		{ after(grammarAccess.getAssignStatementAccess().getDeleteAssignmentParserRuleCall_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetOrFunctionDef__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetOrFunctionDefAccess().getSetDefParserRuleCall_0()); }
		ruleSetDef
		{ after(grammarAccess.getSetOrFunctionDefAccess().getSetDefParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetOrFunctionDefAccess().getFunctionDefParserRuleCall_1()); }
		ruleFunctionDef
		{ after(grammarAccess.getSetOrFunctionDefAccess().getFunctionDefParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getIsFiniteAssignment_4_0()); }
		(rule__RuleAssignment__IsFiniteAssignment_4_0)
		{ after(grammarAccess.getRuleAssignmentAccess().getIsFiniteAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getIsDeriveAssignment_4_1()); }
		(rule__RuleAssignment__IsDeriveAssignment_4_1)
		{ after(grammarAccess.getRuleAssignmentAccess().getIsDeriveAssignment_4_1()); }
	)
	|
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getIsConstraintAssignment_4_2()); }
		(rule__RuleAssignment__IsConstraintAssignment_4_2)
		{ after(grammarAccess.getRuleAssignmentAccess().getIsConstraintAssignment_4_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionScopeAccess().getSingleScopeParserRuleCall_0_0()); }
		ruleSingleScope
		{ after(grammarAccess.getFunctionScopeAccess().getSingleScopeParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionScopeAccess().getFunctionDomainScopeParserRuleCall_0_1()); }
		ruleFunctionDomainScope
		{ after(grammarAccess.getFunctionScopeAccess().getFunctionDomainScopeParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionScopeAccess().getSetScopeParserRuleCall_0_2()); }
		ruleSetScope
		{ after(grammarAccess.getFunctionScopeAccess().getSetScopeParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionScopeAccess().getInfiniteScopeParserRuleCall_0_3()); }
		ruleInfiniteScope
		{ after(grammarAccess.getFunctionScopeAccess().getInfiniteScopeParserRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetScope__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetScopeAccess().getSetRefAssignment_1_0()); }
		(rule__SetScope__SetRefAssignment_1_0)
		{ after(grammarAccess.getSetScopeAccess().getSetRefAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetScopeAccess().getSetAssignment_1_1()); }
		(rule__SetScope__SetAssignment_1_1)
		{ after(grammarAccess.getSetScopeAccess().getSetAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleValueAccess().getFixedValueParserRuleCall_0()); }
		ruleFixedValue
		{ after(grammarAccess.getSingleValueAccess().getFixedValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingleValueAccess().getCalculatedValueParserRuleCall_1()); }
		ruleCalculatedValue
		{ after(grammarAccess.getSingleValueAccess().getCalculatedValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFixedValueAccess().getNumberAssignment_0()); }
		(rule__FixedValue__NumberAssignment_0)
		{ after(grammarAccess.getFixedValueAccess().getNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFixedValueAccess().getStringAssignment_1()); }
		(rule__FixedValue__StringAssignment_1)
		{ after(grammarAccess.getFixedValueAccess().getStringAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getFixedValueAccess().getObjidAssignment_2()); }
		(rule__FixedValue__ObjidAssignment_2)
		{ after(grammarAccess.getFixedValueAccess().getObjidAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAssignment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAssignmentAccess().getFullFunctionAssignmentParserRuleCall_0()); }
		ruleFullFunctionAssignment
		{ after(grammarAccess.getFunctionAssignmentAccess().getFullFunctionAssignmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAssignmentAccess().getBasicExpressionParserRuleCall_1()); }
		ruleBasicExpression
		{ after(grammarAccess.getFunctionAssignmentAccess().getBasicExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicExpressionAccess().getSingleValueParserRuleCall_0()); }
		ruleSingleValue
		{ after(grammarAccess.getBasicExpressionAccess().getSingleValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicExpressionAccess().getOclFunctionParserRuleCall_1()); }
		ruleOclFunction
		{ after(grammarAccess.getBasicExpressionAccess().getOclFunctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicExpressionAccess().getCalculatedValueParserRuleCall_2()); }
		ruleCalculatedValue
		{ after(grammarAccess.getBasicExpressionAccess().getCalculatedValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getGroup_2_0()); }
		(rule__Block__Group_2_0__0)
		{ after(grammarAccess.getBlockAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_2_1()); }
		(rule__Block__StatementsAssignment_2_1)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleStatementAccess().getLetStatementParserRuleCall_0()); }
		ruleLetStatement
		{ after(grammarAccess.getSingleStatementAccess().getLetStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingleStatementAccess().getBlockParserRuleCall_1()); }
		ruleBlock
		{ after(grammarAccess.getSingleStatementAccess().getBlockParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSingleStatementAccess().getReturnStatementParserRuleCall_2()); }
		ruleReturnStatement
		{ after(grammarAccess.getSingleStatementAccess().getReturnStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSingleStatementAccess().getIfStatementParserRuleCall_3()); }
		ruleIfStatement
		{ after(grammarAccess.getSingleStatementAccess().getIfStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSingleStatementAccess().getForStatementParserRuleCall_4()); }
		ruleForStatement
		{ after(grammarAccess.getSingleStatementAccess().getForStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSingleStatementAccess().getForLoopStatementParserRuleCall_5()); }
		ruleForLoopStatement
		{ after(grammarAccess.getSingleStatementAccess().getForLoopStatementParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CalculatedValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculatedValueAccess().getJavaFunctionCallParserRuleCall_0()); }
		ruleJavaFunctionCall
		{ after(grammarAccess.getCalculatedValueAccess().getJavaFunctionCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCalculatedValueAccess().getFunctionCallParserRuleCall_1()); }
		ruleFunctionCall
		{ after(grammarAccess.getCalculatedValueAccess().getFunctionCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCalculatedValueAccess().getIfThenElseParserRuleCall_2()); }
		ruleIfThenElse
		{ after(grammarAccess.getCalculatedValueAccess().getIfThenElseParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjParamAccess().getNumberAssignment_0()); }
		(rule__ObjParam__NumberAssignment_0)
		{ after(grammarAccess.getObjParamAccess().getNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjParamAccess().getStringAssignment_1()); }
		(rule__ObjParam__StringAssignment_1)
		{ after(grammarAccess.getObjParamAccess().getStringAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getObjParamAccess().getGroup_2()); }
		(rule__ObjParam__Group_2__0)
		{ after(grammarAccess.getObjParamAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getFINITEEnumLiteralDeclaration_0()); }
		('finite')
		{ after(grammarAccess.getFunctionTypeAccess().getFINITEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionTypeAccess().getDERIVEEnumLiteralDeclaration_1()); }
		('derive')
		{ after(grammarAccess.getFunctionTypeAccess().getDERIVEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionTypeAccess().getCONSTRAINTEnumLiteralDeclaration_2()); }
		('constraint')
		{ after(grammarAccess.getFunctionTypeAccess().getCONSTRAINTEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaFunctionTypeAccess().getFUNCCALLEnumLiteralDeclaration_0()); }
		('jfunc')
		{ after(grammarAccess.getJavaFunctionTypeAccess().getFUNCCALLEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getJavaFunctionTypeAccess().getCONSTRUCTOREnumLiteralDeclaration_1()); }
		('jcons')
		{ after(grammarAccess.getJavaFunctionTypeAccess().getCONSTRUCTOREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getJavaFunctionTypeAccess().getOPERATIONEnumLiteralDeclaration_2()); }
		('jop')
		{ after(grammarAccess.getJavaFunctionTypeAccess().getOPERATIONEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLang__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLang__Group__0__Impl
	rule__VLang__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLang__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLangAccess().getImportsAssignment_0()); }
	(rule__VLang__ImportsAssignment_0)*
	{ after(grammarAccess.getVLangAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLang__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLang__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLang__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLangAccess().getStatementAssignment_1()); }
	(rule__VLang__StatementAssignment_1)*
	{ after(grammarAccess.getVLangAccess().getStatementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getTargetAssignment_1()); }
	(rule__Import__TargetAssignment_1)
	{ after(grammarAccess.getImportAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignStatement__Group__0__Impl
	rule__AssignStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignStatementAccess().getAlternatives_0()); }
	(rule__AssignStatement__Alternatives_0)
	{ after(grammarAccess.getAssignStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getAssignStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__0__Impl
	rule__FunctionDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getTypeAssignment_0()); }
	(rule__FunctionDef__TypeAssignment_0)?
	{ after(grammarAccess.getFunctionDefAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__1__Impl
	rule__FunctionDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getFunctionKeyword_1()); }
	'function'
	{ after(grammarAccess.getFunctionDefAccess().getFunctionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__2__Impl
	rule__FunctionDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getNameAssignment_2()); }
	(rule__FunctionDef__NameAssignment_2)
	{ after(grammarAccess.getFunctionDefAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__3__Impl
	rule__FunctionDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getColonEqualsSignKeyword_3()); }
	':='
	{ after(grammarAccess.getFunctionDefAccess().getColonEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__4__Impl
	rule__FunctionDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getNewKeyword_4()); }
	'new'
	{ after(grammarAccess.getFunctionDefAccess().getNewKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__5__Impl
	rule__FunctionDef__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getInitAssignment_5()); }
	(rule__FunctionDef__InitAssignment_5)
	{ after(grammarAccess.getFunctionDefAccess().getInitAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getGroup_6()); }
	(rule__FunctionDef__Group_6__0)?
	{ after(grammarAccess.getFunctionDefAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6__0__Impl
	rule__FunctionDef__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getEqualsSignKeyword_6_0()); }
	'='
	{ after(grammarAccess.getFunctionDefAccess().getEqualsSignKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getFullAssignmentAssignment_6_1()); }
	(rule__FunctionDef__FullAssignmentAssignment_6_1)
	{ after(grammarAccess.getFunctionDefAccess().getFullAssignmentAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JavaFunctionDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionDef__Group__0__Impl
	rule__JavaFunctionDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionDefAccess().getTypeAssignment_0()); }
	(rule__JavaFunctionDef__TypeAssignment_0)
	{ after(grammarAccess.getJavaFunctionDefAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionDef__Group__1__Impl
	rule__JavaFunctionDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionDefAccess().getNameAssignment_1()); }
	(rule__JavaFunctionDef__NameAssignment_1)
	{ after(grammarAccess.getJavaFunctionDefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionDef__Group__2__Impl
	rule__JavaFunctionDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionDefAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getJavaFunctionDefAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionDefAccess().getJavaFuncAssignment_3()); }
	(rule__JavaFunctionDef__JavaFuncAssignment_3)
	{ after(grammarAccess.getJavaFunctionDefAccess().getJavaFuncAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasicAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicAction__Group__0__Impl
	rule__BasicAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicActionAccess().getThingAssignment_0()); }
	(rule__BasicAction__ThingAssignment_0)
	{ after(grammarAccess.getBasicActionAccess().getThingAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicAction__Group__1__Impl
	rule__BasicAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicActionAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getBasicActionAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicAction__Group__2__Impl
	rule__BasicAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicActionAccess().getCalledFuncAssignment_2()); }
	(rule__BasicAction__CalledFuncAssignment_2)
	{ after(grammarAccess.getBasicActionAccess().getCalledFuncAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicAction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicActionAccess().getFunctionParsParserRuleCall_3()); }
	ruleFunctionPars
	{ after(grammarAccess.getBasicActionAccess().getFunctionParsParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDef__Group__0__Impl
	rule__SetDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDefAccess().getSetKeyword_0()); }
	'set'
	{ after(grammarAccess.getSetDefAccess().getSetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDef__Group__1__Impl
	rule__SetDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDefAccess().getNameAssignment_1()); }
	(rule__SetDef__NameAssignment_1)
	{ after(grammarAccess.getSetDefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDefAccess().getGroup_2()); }
	(rule__SetDef__Group_2__0)?
	{ after(grammarAccess.getSetDefAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetDef__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDef__Group_2__0__Impl
	rule__SetDef__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDefAccess().getEqualsSignKeyword_2_0()); }
	'='
	{ after(grammarAccess.getSetDefAccess().getEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDef__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDefAccess().getLiteralAssignment_2_1()); }
	(rule__SetDef__LiteralAssignment_2_1)
	{ after(grammarAccess.getSetDefAccess().getLiteralAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group__0__Impl
	rule__SetLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getSetLiteralAction_0()); }
	()
	{ after(grammarAccess.getSetLiteralAccess().getSetLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group__1__Impl
	rule__SetLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group__2__Impl
	rule__SetLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getGroup_2()); }
	(rule__SetLiteral__Group_2__0)?
	{ after(grammarAccess.getSetLiteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLiteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group_2__0__Impl
	rule__SetLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getValuesAssignment_2_0()); }
	(rule__SetLiteral__ValuesAssignment_2_0)
	{ after(grammarAccess.getSetLiteralAccess().getValuesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getGroup_2_1()); }
	(rule__SetLiteral__Group_2_1__0)*
	{ after(grammarAccess.getSetLiteralAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLiteral__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group_2_1__0__Impl
	rule__SetLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getSetLiteralAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLiteralAccess().getValuesAssignment_2_1_1()); }
	(rule__SetLiteral__ValuesAssignment_2_1_1)
	{ after(grammarAccess.getSetLiteralAccess().getValuesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleAssignment__Group__0__Impl
	rule__RuleAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAssignmentAccess().getFunctionAssignment_0()); }
	(rule__RuleAssignment__FunctionAssignment_0)
	{ after(grammarAccess.getRuleAssignmentAccess().getFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleAssignment__Group__1__Impl
	rule__RuleAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAssignmentAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRuleAssignmentAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleAssignment__Group__2__Impl
	rule__RuleAssignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAssignmentAccess().getScopeAssignment_2()); }
	(rule__RuleAssignment__ScopeAssignment_2)
	{ after(grammarAccess.getRuleAssignmentAccess().getScopeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleAssignment__Group__3__Impl
	rule__RuleAssignment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAssignmentAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRuleAssignmentAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleAssignment__Group__4__Impl
	rule__RuleAssignment__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAssignmentAccess().getAlternatives_4()); }
	(rule__RuleAssignment__Alternatives_4)
	{ after(grammarAccess.getRuleAssignmentAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleAssignment__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAssignmentAccess().getAssignmentAssignment_5()); }
	(rule__RuleAssignment__AssignmentAssignment_5)
	{ after(grammarAccess.getRuleAssignmentAccess().getAssignmentAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteAssignment__Group__0__Impl
	rule__DeleteAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAssignmentAccess().getDeleteKeyword_0()); }
	'delete'
	{ after(grammarAccess.getDeleteAssignmentAccess().getDeleteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteAssignment__Group__1__Impl
	rule__DeleteAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAssignmentAccess().getFunctionAssignment_1()); }
	(rule__DeleteAssignment__FunctionAssignment_1)
	{ after(grammarAccess.getDeleteAssignmentAccess().getFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteAssignment__Group__2__Impl
	rule__DeleteAssignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAssignmentAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDeleteAssignmentAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteAssignment__Group__3__Impl
	rule__DeleteAssignment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAssignmentAccess().getScopeAssignment_3()); }
	(rule__DeleteAssignment__ScopeAssignment_3)
	{ after(grammarAccess.getDeleteAssignmentAccess().getScopeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteAssignment__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAssignmentAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getDeleteAssignmentAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionScope__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionScope__Group__0__Impl
	rule__FunctionScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionScopeAccess().getAlternatives_0()); }
	(rule__FunctionScope__Alternatives_0)
	{ after(grammarAccess.getFunctionScopeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionScope__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionScopeAccess().getGroup_1()); }
	(rule__FunctionScope__Group_1__0)?
	{ after(grammarAccess.getFunctionScopeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionScope__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionScope__Group_1__0__Impl
	rule__FunctionScope__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionScopeAccess().getWithKeyword_1_0()); }
	'with'
	{ after(grammarAccess.getFunctionScopeAccess().getWithKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionScope__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionScopeAccess().getFilterAssignment_1_1()); }
	(rule__FunctionScope__FilterAssignment_1_1)
	{ after(grammarAccess.getFunctionScopeAccess().getFilterAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InfiniteScope__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InfiniteScope__Group__0__Impl
	rule__InfiniteScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfiniteScope__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfiniteScopeAccess().getInfiniteScopeAction_0()); }
	()
	{ after(grammarAccess.getInfiniteScopeAccess().getInfiniteScopeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InfiniteScope__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InfiniteScope__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfiniteScope__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfiniteScopeAccess().getAllKeyword_1()); }
	'all'
	{ after(grammarAccess.getInfiniteScopeAccess().getAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDomainScope__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDomainScope__Group__0__Impl
	rule__FunctionDomainScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDomainScope__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDomainScopeAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getFunctionDomainScopeAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDomainScope__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDomainScope__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDomainScope__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDomainScopeAccess().getFunctionAssignment_1()); }
	(rule__FunctionDomainScope__FunctionAssignment_1)
	{ after(grammarAccess.getFunctionDomainScopeAccess().getFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetScope__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetScope__Group__0__Impl
	rule__SetScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetScope__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetScopeAccess().getAmpersandKeyword_0()); }
	'&'
	{ after(grammarAccess.getSetScopeAccess().getAmpersandKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetScope__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetScope__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetScope__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetScopeAccess().getAlternatives_1()); }
	(rule__SetScope__Alternatives_1)
	{ after(grammarAccess.getSetScopeAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FullFunctionAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullFunctionAssignment__Group__0__Impl
	rule__FullFunctionAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullFunctionAssignmentAccess().getParametersAssignment_0()); }
	(rule__FullFunctionAssignment__ParametersAssignment_0)
	{ after(grammarAccess.getFullFunctionAssignmentAccess().getParametersAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullFunctionAssignment__Group__1__Impl
	rule__FullFunctionAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullFunctionAssignmentAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getFullFunctionAssignmentAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullFunctionAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullFunctionAssignmentAccess().getExprAssignment_2()); }
	(rule__FullFunctionAssignment__ExprAssignment_2)
	{ after(grammarAccess.getFullFunctionAssignmentAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OclFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OclFunction__Group__0__Impl
	rule__OclFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OclFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOclFunctionAccess().getOclKeyword_0()); }
	'ocl'
	{ after(grammarAccess.getOclFunctionAccess().getOclKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OclFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OclFunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OclFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOclFunctionAccess().getOclFuncAssignment_1()); }
	(rule__OclFunction__OclFuncAssignment_1)
	{ after(grammarAccess.getOclFunctionAccess().getOclFuncAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getAlternatives_2()); }
	(rule__Block__Alternatives_2)*
	{ after(grammarAccess.getBlockAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2_0__0__Impl
	rule__Block__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementsAssignment_2_0_0()); }
	(rule__Block__StatementsAssignment_2_0_0)
	{ after(grammarAccess.getBlockAccess().getStatementsAssignment_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_2_0_1()); }
	';'
	{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LetStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__0__Impl
	rule__LetStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getLetStatementAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__1__Impl
	rule__LetStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getNameAssignment_1()); }
	(rule__LetStatement__NameAssignment_1)
	{ after(grammarAccess.getLetStatementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getMaybeValueParserRuleCall_2()); }
	(ruleMaybeValue)?
	{ after(grammarAccess.getLetStatementAccess().getMaybeValueParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getMaybeValueParserRuleCall_1()); }
	ruleMaybeValue
	{ after(grammarAccess.getReturnStatementAccess().getMaybeValueParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
	(rule__IfStatement__ConditionAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getThenStatementAssignment_4()); }
	(rule__IfStatement__ThenStatementAssignment_4)
	{ after(grammarAccess.getIfStatementAccess().getThenStatementAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
	(rule__IfStatement__Group_5__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
	'else'
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
	(rule__IfStatement__ElseStatementAssignment_5_1)
	{ after(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForStatementAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getInitVarAssignment_2()); }
	(rule__ForStatement__InitVarAssignment_2)
	{ after(grammarAccess.getForStatementAccess().getInitVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getConditionAssignment_4()); }
	(rule__ForStatement__ConditionAssignment_4)
	{ after(grammarAccess.getForStatementAccess().getConditionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__6__Impl
	rule__ForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getEndProcessingAssignment_6()); }
	(rule__ForStatement__EndProcessingAssignment_6)
	{ after(grammarAccess.getForStatementAccess().getEndProcessingAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__7__Impl
	rule__ForStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getLoopExprAssignment_8()); }
	(rule__ForStatement__LoopExprAssignment_8)
	{ after(grammarAccess.getForStatementAccess().getLoopExprAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__0__Impl
	rule__ForLoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForLoopStatementAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__1__Impl
	rule__ForLoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForLoopStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__2__Impl
	rule__ForLoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getNameAssignment_2()); }
	(rule__ForLoopStatement__NameAssignment_2)
	{ after(grammarAccess.getForLoopStatementAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__3__Impl
	rule__ForLoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getForLoopStatementAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__4__Impl
	rule__ForLoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getValueAssignment_4()); }
	(rule__ForLoopStatement__ValueAssignment_4)
	{ after(grammarAccess.getForLoopStatementAccess().getValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__5__Impl
	rule__ForLoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getForLoopStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoopStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopStatementAccess().getLoopExprAssignment_6()); }
	(rule__ForLoopStatement__LoopExprAssignment_6)
	{ after(grammarAccess.getForLoopStatementAccess().getLoopExprAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaybeValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaybeValue__Group__0__Impl
	rule__MaybeValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaybeValueAccess().getEqualsSignKeyword_0()); }
	'='
	{ after(grammarAccess.getMaybeValueAccess().getEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaybeValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaybeValueAccess().getValueAssignment_1()); }
	(rule__MaybeValue__ValueAssignment_1)
	{ after(grammarAccess.getMaybeValueAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group__0__Impl
	rule__ParDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getParDefAction_0()); }
	()
	{ after(grammarAccess.getParDefAccess().getParDefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group__1__Impl
	rule__ParDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getParDefAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group__2__Impl
	rule__ParDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getGroup_2()); }
	(rule__ParDef__Group_2__0)?
	{ after(grammarAccess.getParDefAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getParDefAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParDef__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group_2__0__Impl
	rule__ParDef__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getParamsAssignment_2_0()); }
	(rule__ParDef__ParamsAssignment_2_0)
	{ after(grammarAccess.getParDefAccess().getParamsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getGroup_2_1()); }
	(rule__ParDef__Group_2_1__0)*
	{ after(grammarAccess.getParDefAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParDef__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group_2_1__0__Impl
	rule__ParDef__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getParDefAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParDef__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParDefAccess().getParamsAssignment_2_1_1()); }
	(rule__ParDef__ParamsAssignment_2_1_1)
	{ after(grammarAccess.getParDefAccess().getParamsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParDef__Group__0__Impl
	rule__FunctionParDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParDefAccess().getNameAssignment_0()); }
	(rule__FunctionParDef__NameAssignment_0)
	{ after(grammarAccess.getFunctionParDefAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParDef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParDefAccess().getGroup_1()); }
	(rule__FunctionParDef__Group_1__0)?
	{ after(grammarAccess.getFunctionParDefAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParDef__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParDef__Group_1__0__Impl
	rule__FunctionParDef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParDefAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getFunctionParDefAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParDef__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParDefAccess().getTypeAssignment_1_1()); }
	(rule__FunctionParDef__TypeAssignment_1_1)
	{ after(grammarAccess.getFunctionParDefAccess().getTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__0__Impl
	rule__IfThenElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__1__Impl
	rule__IfThenElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getConditionAssignment_1()); }
	(rule__IfThenElse__ConditionAssignment_1)
	{ after(grammarAccess.getIfThenElseAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__2__Impl
	rule__IfThenElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getIfThenElseAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__3__Impl
	rule__IfThenElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getThenExprAssignment_3()); }
	(rule__IfThenElse__ThenExprAssignment_3)
	{ after(grammarAccess.getIfThenElseAccess().getThenExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__4__Impl
	rule__IfThenElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getElseKeyword_4()); }
	'else'
	{ after(grammarAccess.getIfThenElseAccess().getElseKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__5__Impl
	rule__IfThenElse__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getElseExprAssignment_5()); }
	(rule__IfThenElse__ElseExprAssignment_5)
	{ after(grammarAccess.getIfThenElseAccess().getElseExprAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getEndifKeyword_6()); }
	'endif'
	{ after(grammarAccess.getIfThenElseAccess().getEndifKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
	(rule__FunctionCall__FunctionAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionParsParserRuleCall_1()); }
	ruleFunctionPars
	{ after(grammarAccess.getFunctionCallAccess().getFunctionParsParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JavaFunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionCall__Group__0__Impl
	rule__JavaFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionCallAccess().getDollarSignKeyword_0()); }
	'$'
	{ after(grammarAccess.getJavaFunctionCallAccess().getDollarSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionCall__Group__1__Impl
	rule__JavaFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionCallAccess().getFunctionAssignment_1()); }
	(rule__JavaFunctionCall__FunctionAssignment_1)
	{ after(grammarAccess.getJavaFunctionCallAccess().getFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaFunctionCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaFunctionCallAccess().getFunctionParsParserRuleCall_2()); }
	ruleFunctionPars
	{ after(grammarAccess.getJavaFunctionCallAccess().getFunctionParsParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionPars__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group__0__Impl
	rule__FunctionPars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFunctionParsAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group__1__Impl
	rule__FunctionPars__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getGroup_1()); }
	(rule__FunctionPars__Group_1__0)?
	{ after(grammarAccess.getFunctionParsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getFunctionParsAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionPars__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group_1__0__Impl
	rule__FunctionPars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getParamsAssignment_1_0()); }
	(rule__FunctionPars__ParamsAssignment_1_0)
	{ after(grammarAccess.getFunctionParsAccess().getParamsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getGroup_1_1()); }
	(rule__FunctionPars__Group_1_1__0)*
	{ after(grammarAccess.getFunctionParsAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionPars__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group_1_1__0__Impl
	rule__FunctionPars__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getFunctionParsAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPars__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParsAccess().getParamsAssignment_1_1_1()); }
	(rule__FunctionPars__ParamsAssignment_1_1_1)
	{ after(grammarAccess.getFunctionParsAccess().getParamsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjId__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group__0__Impl
	rule__ObjId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getObjIdAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group__1__Impl
	rule__ObjId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getNameAssignment_1()); }
	(rule__ObjId__NameAssignment_1)
	{ after(grammarAccess.getObjIdAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getGroup_2()); }
	(rule__ObjId__Group_2__0)?
	{ after(grammarAccess.getObjIdAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjId__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2__0__Impl
	rule__ObjId__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getObjIdAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2__1__Impl
	rule__ObjId__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getGroup_2_1()); }
	(rule__ObjId__Group_2_1__0)?
	{ after(grammarAccess.getObjIdAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getObjIdAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjId__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2_1__0__Impl
	rule__ObjId__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getParamsAssignment_2_1_0()); }
	(rule__ObjId__ParamsAssignment_2_1_0)
	{ after(grammarAccess.getObjIdAccess().getParamsAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getGroup_2_1_1()); }
	(rule__ObjId__Group_2_1_1__0)*
	{ after(grammarAccess.getObjIdAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjId__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2_1_1__0__Impl
	rule__ObjId__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getCommaKeyword_2_1_1_0()); }
	','
	{ after(grammarAccess.getObjIdAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjId__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjIdAccess().getParamsAssignment_2_1_1_1()); }
	(rule__ObjId__ParamsAssignment_2_1_1_1)
	{ after(grammarAccess.getObjIdAccess().getParamsAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjParam__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2__0__Impl
	rule__ObjParam__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getNameAssignment_2_0()); }
	(rule__ObjParam__NameAssignment_2_0)
	{ after(grammarAccess.getObjParamAccess().getNameAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getGroup_2_1()); }
	(rule__ObjParam__Group_2_1__0)?
	{ after(grammarAccess.getObjParamAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjParam__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1__0__Impl
	rule__ObjParam__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getLeftParenthesisKeyword_2_1_0()); }
	'('
	{ after(grammarAccess.getObjParamAccess().getLeftParenthesisKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1__1__Impl
	rule__ObjParam__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getGroup_2_1_1()); }
	(rule__ObjParam__Group_2_1_1__0)?
	{ after(grammarAccess.getObjParamAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getRightParenthesisKeyword_2_1_2()); }
	')'
	{ after(grammarAccess.getObjParamAccess().getRightParenthesisKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjParam__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1_1__0__Impl
	rule__ObjParam__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getParamsAssignment_2_1_1_0()); }
	(rule__ObjParam__ParamsAssignment_2_1_1_0)
	{ after(grammarAccess.getObjParamAccess().getParamsAssignment_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getGroup_2_1_1_1()); }
	(rule__ObjParam__Group_2_1_1_1__0)*
	{ after(grammarAccess.getObjParamAccess().getGroup_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjParam__Group_2_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1_1_1__0__Impl
	rule__ObjParam__Group_2_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getCommaKeyword_2_1_1_1_0()); }
	','
	{ after(grammarAccess.getObjParamAccess().getCommaKeyword_2_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjParam__Group_2_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__Group_2_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjParamAccess().getParamsAssignment_2_1_1_1_1()); }
	(rule__ObjParam__ParamsAssignment_2_1_1_1_1)
	{ after(grammarAccess.getObjParamAccess().getParamsAssignment_2_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLang__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLangAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getVLangAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLang__StatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLangAccess().getStatementAssignStatementParserRuleCall_1_0()); }
		ruleAssignStatement
		{ after(grammarAccess.getVLangAccess().getStatementAssignStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getTargetESTRINGTerminalRuleCall_1_0()); }
		RULE_ESTRING
		{ after(grammarAccess.getImportAccess().getTargetESTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getTypeFunctionTypeEnumRuleCall_0_0()); }
		ruleFunctionType
		{ after(grammarAccess.getFunctionDefAccess().getTypeFunctionTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDefAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__InitAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getInitJavaFunctionCallParserRuleCall_5_0()); }
		ruleJavaFunctionCall
		{ after(grammarAccess.getFunctionDefAccess().getInitJavaFunctionCallParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__FullAssignmentAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getFullAssignmentFunctionAssignmentParserRuleCall_6_1_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getFunctionDefAccess().getFullAssignmentFunctionAssignmentParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaFunctionDefAccess().getTypeJavaFunctionTypeEnumRuleCall_0_0()); }
		ruleJavaFunctionType
		{ after(grammarAccess.getJavaFunctionDefAccess().getTypeJavaFunctionTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaFunctionDefAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getJavaFunctionDefAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionDef__JavaFuncAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaFunctionDefAccess().getJavaFuncESTRINGTerminalRuleCall_3_0()); }
		RULE_ESTRING
		{ after(grammarAccess.getJavaFunctionDefAccess().getJavaFuncESTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__ThingAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicActionAccess().getThingSetOrFunctionDefCrossReference_0_0()); }
		(
			{ before(grammarAccess.getBasicActionAccess().getThingSetOrFunctionDefIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getBasicActionAccess().getThingSetOrFunctionDefIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getBasicActionAccess().getThingSetOrFunctionDefCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAction__CalledFuncAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicActionAccess().getCalledFuncIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getBasicActionAccess().getCalledFuncIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetDefAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSetDefAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDef__LiteralAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetDefAccess().getLiteralSetLiteralParserRuleCall_2_1_0()); }
		ruleSetLiteral
		{ after(grammarAccess.getSetDefAccess().getLiteralSetLiteralParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__ValuesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetLiteralAccess().getValuesFixedValueParserRuleCall_2_0_0()); }
		ruleFixedValue
		{ after(grammarAccess.getSetLiteralAccess().getValuesFixedValueParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__ValuesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetLiteralAccess().getValuesFixedValueParserRuleCall_2_1_1_0()); }
		ruleFixedValue
		{ after(grammarAccess.getSetLiteralAccess().getValuesFixedValueParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__FunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getFunctionFunctionDefCrossReference_0_0()); }
		(
			{ before(grammarAccess.getRuleAssignmentAccess().getFunctionFunctionDefIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRuleAssignmentAccess().getFunctionFunctionDefIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getRuleAssignmentAccess().getFunctionFunctionDefCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__ScopeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getScopeFunctionScopeParserRuleCall_2_0()); }
		ruleFunctionScope
		{ after(grammarAccess.getRuleAssignmentAccess().getScopeFunctionScopeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__IsFiniteAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getIsFiniteColonEqualsSignKeyword_4_0_0()); }
		(
			{ before(grammarAccess.getRuleAssignmentAccess().getIsFiniteColonEqualsSignKeyword_4_0_0()); }
			':='
			{ after(grammarAccess.getRuleAssignmentAccess().getIsFiniteColonEqualsSignKeyword_4_0_0()); }
		)
		{ after(grammarAccess.getRuleAssignmentAccess().getIsFiniteColonEqualsSignKeyword_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__IsDeriveAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getIsDeriveEqualsSignKeyword_4_1_0()); }
		(
			{ before(grammarAccess.getRuleAssignmentAccess().getIsDeriveEqualsSignKeyword_4_1_0()); }
			'='
			{ after(grammarAccess.getRuleAssignmentAccess().getIsDeriveEqualsSignKeyword_4_1_0()); }
		)
		{ after(grammarAccess.getRuleAssignmentAccess().getIsDeriveEqualsSignKeyword_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__IsConstraintAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getIsConstraintEqualsSignEqualsSignKeyword_4_2_0()); }
		(
			{ before(grammarAccess.getRuleAssignmentAccess().getIsConstraintEqualsSignEqualsSignKeyword_4_2_0()); }
			'=='
			{ after(grammarAccess.getRuleAssignmentAccess().getIsConstraintEqualsSignEqualsSignKeyword_4_2_0()); }
		)
		{ after(grammarAccess.getRuleAssignmentAccess().getIsConstraintEqualsSignEqualsSignKeyword_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleAssignment__AssignmentAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAssignmentAccess().getAssignmentFunctionAssignmentParserRuleCall_5_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getRuleAssignmentAccess().getAssignmentFunctionAssignmentParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__FunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAssignmentAccess().getFunctionFunctionDefCrossReference_1_0()); }
		(
			{ before(grammarAccess.getDeleteAssignmentAccess().getFunctionFunctionDefIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDeleteAssignmentAccess().getFunctionFunctionDefIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getDeleteAssignmentAccess().getFunctionFunctionDefCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteAssignment__ScopeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAssignmentAccess().getScopeFunctionScopeParserRuleCall_3_0()); }
		ruleFunctionScope
		{ after(grammarAccess.getDeleteAssignmentAccess().getScopeFunctionScopeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionScope__FilterAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionScopeAccess().getFilterFilterParserRuleCall_1_1_0()); }
		ruleFilter
		{ after(grammarAccess.getFunctionScopeAccess().getFilterFilterParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDomainScope__FunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDomainScopeAccess().getFunctionFunctionDefCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFunctionDomainScopeAccess().getFunctionFunctionDefIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionDomainScopeAccess().getFunctionFunctionDefIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFunctionDomainScopeAccess().getFunctionFunctionDefCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetScope__SetRefAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetScopeAccess().getSetRefSetDefCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getSetScopeAccess().getSetRefSetDefIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSetScopeAccess().getSetRefSetDefIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getSetScopeAccess().getSetRefSetDefCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetScope__SetAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetScopeAccess().getSetSetLiteralParserRuleCall_1_1_0()); }
		ruleSetLiteral
		{ after(grammarAccess.getSetScopeAccess().getSetSetLiteralParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleScope__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleScopeAccess().getValueSingleValueParserRuleCall_0()); }
		ruleSingleValue
		{ after(grammarAccess.getSingleScopeAccess().getValueSingleValueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedValue__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFixedValueAccess().getNumberINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getFixedValueAccess().getNumberINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedValue__StringAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFixedValueAccess().getStringSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFixedValueAccess().getStringSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedValue__ObjidAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFixedValueAccess().getObjidObjIdParserRuleCall_2_0()); }
		ruleObjId
		{ after(grammarAccess.getFixedValueAccess().getObjidObjIdParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__ParametersAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullFunctionAssignmentAccess().getParametersParDefParserRuleCall_0_0()); }
		ruleParDef
		{ after(grammarAccess.getFullFunctionAssignmentAccess().getParametersParDefParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullFunctionAssignment__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullFunctionAssignmentAccess().getExprBasicExpressionParserRuleCall_2_0()); }
		ruleBasicExpression
		{ after(grammarAccess.getFullFunctionAssignmentAccess().getExprBasicExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OclFunction__OclFuncAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOclFunctionAccess().getOclFuncSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getOclFunctionAccess().getOclFuncSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsSingleStatementParserRuleCall_2_0_0_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsSingleStatementParserRuleCall_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsBlockParserRuleCall_2_1_0()); }
		ruleBlock
		{ after(grammarAccess.getBlockAccess().getStatementsBlockParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetStatementAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLetStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getConditionFunctionAssignmentParserRuleCall_2_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getIfStatementAccess().getConditionFunctionAssignmentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenStatementAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getThenStatementSingleStatementParserRuleCall_4_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getIfStatementAccess().getThenStatementSingleStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseStatementAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseStatementSingleStatementParserRuleCall_5_1_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getIfStatementAccess().getElseStatementSingleStatementParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__InitVarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getInitVarSingleStatementParserRuleCall_2_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getForStatementAccess().getInitVarSingleStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__ConditionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getConditionFunctionAssignmentParserRuleCall_4_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getForStatementAccess().getConditionFunctionAssignmentParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__EndProcessingAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getEndProcessingSingleStatementParserRuleCall_6_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getForStatementAccess().getEndProcessingSingleStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__LoopExprAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getLoopExprSingleStatementParserRuleCall_8_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getForStatementAccess().getLoopExprSingleStatementParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopStatementAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getForLoopStatementAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__ValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopStatementAccess().getValueFunctionAssignmentParserRuleCall_4_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getForLoopStatementAccess().getValueFunctionAssignmentParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__LoopExprAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopStatementAccess().getLoopExprSingleStatementParserRuleCall_6_0()); }
		ruleSingleStatement
		{ after(grammarAccess.getForLoopStatementAccess().getLoopExprSingleStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeValue__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaybeValueAccess().getValueFunctionAssignmentParserRuleCall_1_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getMaybeValueAccess().getValueFunctionAssignmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__ParamsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParDefAccess().getParamsFunctionParDefParserRuleCall_2_0_0()); }
		ruleFunctionParDef
		{ after(grammarAccess.getParDefAccess().getParamsFunctionParDefParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParDef__ParamsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParDefAccess().getParamsFunctionParDefParserRuleCall_2_1_1_0()); }
		ruleFunctionParDef
		{ after(grammarAccess.getParDefAccess().getParamsFunctionParDefParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParDefAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionParDefAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParDef__TypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParDefAccess().getTypeIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionParDefAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getConditionFunctionAssignmentParserRuleCall_1_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getIfThenElseAccess().getConditionFunctionAssignmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getThenExprFunctionAssignmentParserRuleCall_3_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getIfThenElseAccess().getThenExprFunctionAssignmentParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseExprAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getElseExprFunctionAssignmentParserRuleCall_5_0()); }
		ruleFunctionAssignment
		{ after(grammarAccess.getIfThenElseAccess().getElseExprFunctionAssignmentParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFunctionCall__FunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaFunctionCallAccess().getFunctionJavaFunctionDefCrossReference_1_0()); }
		(
			{ before(grammarAccess.getJavaFunctionCallAccess().getFunctionJavaFunctionDefIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getJavaFunctionCallAccess().getFunctionJavaFunctionDefIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getJavaFunctionCallAccess().getFunctionJavaFunctionDefCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__ParamsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParsAccess().getParamsFunctionParParserRuleCall_1_0_0()); }
		ruleFunctionPar
		{ after(grammarAccess.getFunctionParsAccess().getParamsFunctionParParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPars__ParamsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParsAccess().getParamsFunctionParParserRuleCall_1_1_1_0()); }
		ruleFunctionPar
		{ after(grammarAccess.getFunctionParsAccess().getParamsFunctionParParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjIdAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getObjIdAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__ParamsAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjIdAccess().getParamsObjParamParserRuleCall_2_1_0_0()); }
		ruleObjParam
		{ after(grammarAccess.getObjIdAccess().getParamsObjParamParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjId__ParamsAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjIdAccess().getParamsObjParamParserRuleCall_2_1_1_1_0()); }
		ruleObjParam
		{ after(grammarAccess.getObjIdAccess().getParamsObjParamParserRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjParamAccess().getNumberINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getObjParamAccess().getNumberINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__StringAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjParamAccess().getStringSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getObjParamAccess().getStringSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__NameAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjParamAccess().getNameIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getObjParamAccess().getNameIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__ParamsAssignment_2_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjParamAccess().getParamsObjParamParserRuleCall_2_1_1_0_0()); }
		ruleObjParam
		{ after(grammarAccess.getObjParamAccess().getParamsObjParamParserRuleCall_2_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjParam__ParamsAssignment_2_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjParamAccess().getParamsObjParamParserRuleCall_2_1_1_1_1_0()); }
		ruleObjParam
		{ after(grammarAccess.getObjParamAccess().getParamsObjParamParserRuleCall_2_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ESTRING : (RULE_ID|RULE_STRING);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
