/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.virtmodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class VLangElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.VLang");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementAssignStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//VLang:
		//	imports+=Import*
		//	statement+=AssignStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* statement+=AssignStatement*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//statement+=AssignStatement*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//AssignStatement
		public RuleCall getStatementAssignStatementParserRuleCall_1_0() { return cStatementAssignStatementParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetESTRINGTerminalRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' target=ESTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' target=ESTRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//target=ESTRING
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//ESTRING
		public RuleCall getTargetESTRINGTerminalRuleCall_1_0() { return cTargetESTRINGTerminalRuleCall_1_0; }
	}
	public class AssignStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.AssignStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cJavaFunctionDefParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSetOrFunctionDefParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cRuleAssignmentParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBasicActionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cDeleteAssignmentParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AssignStatement:
		//	(JavaFunctionDef | SetOrFunctionDef | RuleAssignment | BasicAction | DeleteAssignment) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(JavaFunctionDef | SetOrFunctionDef | RuleAssignment | BasicAction | DeleteAssignment) ';'
		public Group getGroup() { return cGroup; }
		
		//JavaFunctionDef | SetOrFunctionDef | RuleAssignment | BasicAction | DeleteAssignment
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//JavaFunctionDef
		public RuleCall getJavaFunctionDefParserRuleCall_0_0() { return cJavaFunctionDefParserRuleCall_0_0; }
		
		//SetOrFunctionDef
		public RuleCall getSetOrFunctionDefParserRuleCall_0_1() { return cSetOrFunctionDefParserRuleCall_0_1; }
		
		//RuleAssignment
		public RuleCall getRuleAssignmentParserRuleCall_0_2() { return cRuleAssignmentParserRuleCall_0_2; }
		
		//BasicAction
		public RuleCall getBasicActionParserRuleCall_0_3() { return cBasicActionParserRuleCall_0_3; }
		
		//DeleteAssignment
		public RuleCall getDeleteAssignmentParserRuleCall_0_4() { return cDeleteAssignmentParserRuleCall_0_4; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SetOrFunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SetOrFunctionDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**Definiere verschiedene Arten von Funktionen:
		// *  - Finite
		// *  - Constraintbasierte
		// *  - Ganz allgemeine
		// */ SetOrFunctionDef:
		//	SetDef | FunctionDef;
		@Override public ParserRule getRule() { return rule; }
		
		//SetDef | FunctionDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SetDef
		public RuleCall getSetDefParserRuleCall_0() { return cSetDefParserRuleCall_0; }
		
		//FunctionDef
		public RuleCall getFunctionDefParserRuleCall_1() { return cFunctionDefParserRuleCall_1; }
	}
	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeFunctionTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitJavaFunctionCallParserRuleCall_5_0 = (RuleCall)cInitAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFullAssignmentAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFullAssignmentFunctionAssignmentParserRuleCall_6_1_0 = (RuleCall)cFullAssignmentAssignment_6_1.eContents().get(0);
		
		//FunctionDef:
		//	type=FunctionType? 'function' name=ID ':=' 'new' init=JavaFunctionCall ('=' fullAssignment=FunctionAssignment)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=FunctionType? 'function' name=ID ':=' 'new' init=JavaFunctionCall ('=' fullAssignment=FunctionAssignment)?
		public Group getGroup() { return cGroup; }
		
		//type=FunctionType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//FunctionType
		public RuleCall getTypeFunctionTypeEnumRuleCall_0_0() { return cTypeFunctionTypeEnumRuleCall_0_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }
		
		//'new'
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }
		
		//init=JavaFunctionCall
		public Assignment getInitAssignment_5() { return cInitAssignment_5; }
		
		//JavaFunctionCall
		public RuleCall getInitJavaFunctionCallParserRuleCall_5_0() { return cInitJavaFunctionCallParserRuleCall_5_0; }
		
		//('=' fullAssignment=FunctionAssignment)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//fullAssignment=FunctionAssignment
		public Assignment getFullAssignmentAssignment_6_1() { return cFullAssignmentAssignment_6_1; }
		
		//FunctionAssignment
		public RuleCall getFullAssignmentFunctionAssignmentParserRuleCall_6_1_0() { return cFullAssignmentFunctionAssignmentParserRuleCall_6_1_0; }
	}
	public class JavaFunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.JavaFunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJavaFunctionTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJavaFuncESTRINGTerminalRuleCall_3_0 = (RuleCall)cJavaFuncAssignment_3.eContents().get(0);
		
		///**TODO: No type checking is performed ... */ JavaFunctionDef:
		//	type=JavaFunctionType name=ID '=' javaFunc=ESTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//type=JavaFunctionType name=ID '=' javaFunc=ESTRING
		public Group getGroup() { return cGroup; }
		
		//type=JavaFunctionType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JavaFunctionType
		public RuleCall getTypeJavaFunctionTypeEnumRuleCall_0_0() { return cTypeJavaFunctionTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//javaFunc=ESTRING
		public Assignment getJavaFuncAssignment_3() { return cJavaFuncAssignment_3; }
		
		//ESTRING
		public RuleCall getJavaFuncESTRINGTerminalRuleCall_3_0() { return cJavaFuncESTRINGTerminalRuleCall_3_0; }
	}
	public class BasicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.BasicAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cThingSetOrFunctionDefCrossReference_0_0 = (CrossReference)cThingAssignment_0.eContents().get(0);
		private final RuleCall cThingSetOrFunctionDefIDTerminalRuleCall_0_0_1 = (RuleCall)cThingSetOrFunctionDefCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalledFuncAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalledFuncIDTerminalRuleCall_2_0 = (RuleCall)cCalledFuncAssignment_2.eContents().get(0);
		private final RuleCall cFunctionParsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//BasicAction:
		//	thing=[SetOrFunctionDef] '.' calledFunc=ID FunctionPars;
		@Override public ParserRule getRule() { return rule; }
		
		//thing=[SetOrFunctionDef] '.' calledFunc=ID FunctionPars
		public Group getGroup() { return cGroup; }
		
		//thing=[SetOrFunctionDef]
		public Assignment getThingAssignment_0() { return cThingAssignment_0; }
		
		//[SetOrFunctionDef]
		public CrossReference getThingSetOrFunctionDefCrossReference_0_0() { return cThingSetOrFunctionDefCrossReference_0_0; }
		
		//ID
		public RuleCall getThingSetOrFunctionDefIDTerminalRuleCall_0_0_1() { return cThingSetOrFunctionDefIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//calledFunc=ID
		public Assignment getCalledFuncAssignment_2() { return cCalledFuncAssignment_2; }
		
		//ID
		public RuleCall getCalledFuncIDTerminalRuleCall_2_0() { return cCalledFuncIDTerminalRuleCall_2_0; }
		
		//FunctionPars
		public RuleCall getFunctionParsParserRuleCall_3() { return cFunctionParsParserRuleCall_3; }
	}
	public class SetDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SetDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLiteralSetLiteralParserRuleCall_2_1_0 = (RuleCall)cLiteralAssignment_2_1.eContents().get(0);
		
		//SetDef:
		//	'set' name=ID ('=' literal=SetLiteral)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' name=ID ('=' literal=SetLiteral)?
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' literal=SetLiteral)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//literal=SetLiteral
		public Assignment getLiteralAssignment_2_1() { return cLiteralAssignment_2_1; }
		
		//SetLiteral
		public RuleCall getLiteralSetLiteralParserRuleCall_2_1_0() { return cLiteralSetLiteralParserRuleCall_2_1_0; }
	}
	public class SetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesFixedValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesFixedValueParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetLiteral:
		//	{SetLiteral}
		//	'{' (values+=FixedValue (',' values+=FixedValue)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetLiteral} '{' (values+=FixedValue (',' values+=FixedValue)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SetLiteral}
		public Action getSetLiteralAction_0() { return cSetLiteralAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(values+=FixedValue (',' values+=FixedValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=FixedValue
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//FixedValue
		public RuleCall getValuesFixedValueParserRuleCall_2_0_0() { return cValuesFixedValueParserRuleCall_2_0_0; }
		
		//(',' values+=FixedValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=FixedValue
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//FixedValue
		public RuleCall getValuesFixedValueParserRuleCall_2_1_1_0() { return cValuesFixedValueParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RuleAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.RuleAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionDefCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionDefIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionDefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScopeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScopeFunctionScopeParserRuleCall_2_0 = (RuleCall)cScopeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cIsFiniteAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cIsFiniteColonEqualsSignKeyword_4_0_0 = (Keyword)cIsFiniteAssignment_4_0.eContents().get(0);
		private final Assignment cIsDeriveAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cIsDeriveEqualsSignKeyword_4_1_0 = (Keyword)cIsDeriveAssignment_4_1.eContents().get(0);
		private final Assignment cIsConstraintAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final Keyword cIsConstraintEqualsSignEqualsSignKeyword_4_2_0 = (Keyword)cIsConstraintAssignment_4_2.eContents().get(0);
		private final Assignment cAssignmentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssignmentFunctionAssignmentParserRuleCall_5_0 = (RuleCall)cAssignmentAssignment_5.eContents().get(0);
		
		//RuleAssignment:
		//	function=[FunctionDef] '(' scope=FunctionScope ')' (isFinite?=':=' | isDerive?='=' | isConstraint?='==')
		//	assignment=FunctionAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//function=[FunctionDef] '(' scope=FunctionScope ')' (isFinite?=':=' | isDerive?='=' | isConstraint?='==')
		//assignment=FunctionAssignment
		public Group getGroup() { return cGroup; }
		
		//function=[FunctionDef]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[FunctionDef]
		public CrossReference getFunctionFunctionDefCrossReference_0_0() { return cFunctionFunctionDefCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionDefIDTerminalRuleCall_0_0_1() { return cFunctionFunctionDefIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//scope=FunctionScope
		public Assignment getScopeAssignment_2() { return cScopeAssignment_2; }
		
		//FunctionScope
		public RuleCall getScopeFunctionScopeParserRuleCall_2_0() { return cScopeFunctionScopeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//isFinite?=':=' | isDerive?='=' | isConstraint?='=='
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//isFinite?=':='
		public Assignment getIsFiniteAssignment_4_0() { return cIsFiniteAssignment_4_0; }
		
		//':='
		public Keyword getIsFiniteColonEqualsSignKeyword_4_0_0() { return cIsFiniteColonEqualsSignKeyword_4_0_0; }
		
		//isDerive?='='
		public Assignment getIsDeriveAssignment_4_1() { return cIsDeriveAssignment_4_1; }
		
		//'='
		public Keyword getIsDeriveEqualsSignKeyword_4_1_0() { return cIsDeriveEqualsSignKeyword_4_1_0; }
		
		//isConstraint?='=='
		public Assignment getIsConstraintAssignment_4_2() { return cIsConstraintAssignment_4_2; }
		
		//'=='
		public Keyword getIsConstraintEqualsSignEqualsSignKeyword_4_2_0() { return cIsConstraintEqualsSignEqualsSignKeyword_4_2_0; }
		
		//assignment=FunctionAssignment
		public Assignment getAssignmentAssignment_5() { return cAssignmentAssignment_5; }
		
		//FunctionAssignment
		public RuleCall getAssignmentFunctionAssignmentParserRuleCall_5_0() { return cAssignmentFunctionAssignmentParserRuleCall_5_0; }
	}
	public class DeleteAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.DeleteAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionDefCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionDefIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionDefCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeFunctionScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteAssignment:
		//	'delete' function=[FunctionDef] '(' scope=FunctionScope ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' function=[FunctionDef] '(' scope=FunctionScope ')'
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//function=[FunctionDef]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[FunctionDef]
		public CrossReference getFunctionFunctionDefCrossReference_1_0() { return cFunctionFunctionDefCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionFunctionDefIDTerminalRuleCall_1_0_1() { return cFunctionFunctionDefIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//scope=FunctionScope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }
		
		//FunctionScope
		public RuleCall getScopeFunctionScopeParserRuleCall_3_0() { return cScopeFunctionScopeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FunctionScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSingleScopeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFunctionDomainScopeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSetScopeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cInfiniteScopeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_1_0 = (RuleCall)cFilterAssignment_1_1.eContents().get(0);
		
		//FunctionScope:
		//	(SingleScope | FunctionDomainScope | SetScope | InfiniteScope) ('with' filter=Filter)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(SingleScope | FunctionDomainScope | SetScope | InfiniteScope) ('with' filter=Filter)?
		public Group getGroup() { return cGroup; }
		
		//SingleScope | FunctionDomainScope | SetScope | InfiniteScope
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//SingleScope
		public RuleCall getSingleScopeParserRuleCall_0_0() { return cSingleScopeParserRuleCall_0_0; }
		
		//FunctionDomainScope
		public RuleCall getFunctionDomainScopeParserRuleCall_0_1() { return cFunctionDomainScopeParserRuleCall_0_1; }
		
		//SetScope
		public RuleCall getSetScopeParserRuleCall_0_2() { return cSetScopeParserRuleCall_0_2; }
		
		//InfiniteScope
		public RuleCall getInfiniteScopeParserRuleCall_0_3() { return cInfiniteScopeParserRuleCall_0_3; }
		
		//('with' filter=Filter)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'with'
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_1_1() { return cFilterAssignment_1_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_1_0() { return cFilterFilterParserRuleCall_1_1_0; }
	}
	public class InfiniteScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.InfiniteScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInfiniteScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InfiniteScope:
		//	{InfiniteScope}
		//	'all';
		@Override public ParserRule getRule() { return rule; }
		
		//{InfiniteScope} 'all'
		public Group getGroup() { return cGroup; }
		
		//{InfiniteScope}
		public Action getInfiniteScopeAction_0() { return cInfiniteScopeAction_0; }
		
		//'all'
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.Filter");
		private final RuleCall cFunctionAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Filter:
		//	FunctionAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionAssignment
		public RuleCall getFunctionAssignmentParserRuleCall() { return cFunctionAssignmentParserRuleCall; }
	}
	public class FunctionDomainScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionDomainScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionDefCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionDefIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionDefCrossReference_1_0.eContents().get(1);
		
		//FunctionDomainScope:
		//	'@' function=[FunctionDef];
		@Override public ParserRule getRule() { return rule; }
		
		//'@' function=[FunctionDef]
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//function=[FunctionDef]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[FunctionDef]
		public CrossReference getFunctionFunctionDefCrossReference_1_0() { return cFunctionFunctionDefCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionFunctionDefIDTerminalRuleCall_1_0_1() { return cFunctionFunctionDefIDTerminalRuleCall_1_0_1; }
	}
	public class SetScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SetScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSetRefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cSetRefSetDefCrossReference_1_0_0 = (CrossReference)cSetRefAssignment_1_0.eContents().get(0);
		private final RuleCall cSetRefSetDefIDTerminalRuleCall_1_0_0_1 = (RuleCall)cSetRefSetDefCrossReference_1_0_0.eContents().get(1);
		private final Assignment cSetAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSetSetLiteralParserRuleCall_1_1_0 = (RuleCall)cSetAssignment_1_1.eContents().get(0);
		
		//SetScope:
		//	'&' (setRef=[SetDef] | set=SetLiteral);
		@Override public ParserRule getRule() { return rule; }
		
		//'&' (setRef=[SetDef] | set=SetLiteral)
		public Group getGroup() { return cGroup; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//setRef=[SetDef] | set=SetLiteral
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//setRef=[SetDef]
		public Assignment getSetRefAssignment_1_0() { return cSetRefAssignment_1_0; }
		
		//[SetDef]
		public CrossReference getSetRefSetDefCrossReference_1_0_0() { return cSetRefSetDefCrossReference_1_0_0; }
		
		//ID
		public RuleCall getSetRefSetDefIDTerminalRuleCall_1_0_0_1() { return cSetRefSetDefIDTerminalRuleCall_1_0_0_1; }
		
		//set=SetLiteral
		public Assignment getSetAssignment_1_1() { return cSetAssignment_1_1; }
		
		//SetLiteral
		public RuleCall getSetSetLiteralParserRuleCall_1_1_0() { return cSetSetLiteralParserRuleCall_1_1_0; }
	}
	public class SingleScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SingleScope");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSingleValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SingleScope:
		//	value=SingleValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SingleValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SingleValue
		public RuleCall getValueSingleValueParserRuleCall_0() { return cValueSingleValueParserRuleCall_0; }
	}
	public class SingleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SingleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixedValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalculatedValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SingleValue:
		//	FixedValue | CalculatedValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FixedValue | CalculatedValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FixedValue
		public RuleCall getFixedValueParserRuleCall_0() { return cFixedValueParserRuleCall_0; }
		
		//CalculatedValue
		public RuleCall getCalculatedValueParserRuleCall_1() { return cCalculatedValueParserRuleCall_1; }
	}
	public class FixedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FixedValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cObjidAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cObjidObjIdParserRuleCall_2_0 = (RuleCall)cObjidAssignment_2.eContents().get(0);
		
		//FixedValue:
		//	number=INT | string=STRING | objid=ObjId;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT | string=STRING | objid=ObjId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//objid=ObjId
		public Assignment getObjidAssignment_2() { return cObjidAssignment_2; }
		
		//ObjId
		public RuleCall getObjidObjIdParserRuleCall_2_0() { return cObjidObjIdParserRuleCall_2_0; }
	}
	public class FunctionAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullFunctionAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionAssignment:
		//	FullFunctionAssignment | Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//FullFunctionAssignment | Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FullFunctionAssignment
		public RuleCall getFullFunctionAssignmentParserRuleCall_0() { return cFullFunctionAssignmentParserRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class FullFunctionAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FullFunctionAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cParametersParDefParserRuleCall_0_0_0 = (RuleCall)cParametersAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//FullFunctionAssignment:
		//	(parameters=ParDef '->')? expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(parameters=ParDef '->')? expr=Expression
		public Group getGroup() { return cGroup; }
		
		//(parameters=ParDef '->')?
		public Group getGroup_0() { return cGroup_0; }
		
		//parameters=ParDef
		public Assignment getParametersAssignment_0_0() { return cParametersAssignment_0_0; }
		
		//ParDef
		public RuleCall getParametersParDefParserRuleCall_0_0_0() { return cParametersParDefParserRuleCall_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFullFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOclFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//	SingleValue | FullFunction | OclFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleValue | FullFunction | OclFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleValue
		public RuleCall getSingleValueParserRuleCall_0() { return cSingleValueParserRuleCall_0; }
		
		//FullFunction
		public RuleCall getFullFunctionParserRuleCall_1() { return cFullFunctionParserRuleCall_1; }
		
		//OclFunction
		public RuleCall getOclFunctionParserRuleCall_2() { return cOclFunctionParserRuleCall_2; }
	}
	public class OclFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.OclFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOclFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOclFuncSTRINGTerminalRuleCall_1_0 = (RuleCall)cOclFuncAssignment_1.eContents().get(0);
		
		//OclFunction:
		//	'ocl' oclFunc=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ocl' oclFunc=STRING
		public Group getGroup() { return cGroup; }
		
		//'ocl'
		public Keyword getOclKeyword_0() { return cOclKeyword_0; }
		
		//oclFunc=STRING
		public Assignment getOclFuncAssignment_1() { return cOclFuncAssignment_1; }
		
		//STRING
		public RuleCall getOclFuncSTRINGTerminalRuleCall_1_0() { return cOclFuncSTRINGTerminalRuleCall_1_0; }
	}
	public class FullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FullFunction");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FullFunction:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cStatementsSingleStatementParserRuleCall_2_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStatementsBlockParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block}
		//	'{' (statements+=SingleStatement ';' | statements+=Block)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' (statements+=SingleStatement ';' | statements+=Block)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(statements+=SingleStatement ';' | statements+=Block)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//statements+=SingleStatement ';'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//statements+=SingleStatement
		public Assignment getStatementsAssignment_2_0_0() { return cStatementsAssignment_2_0_0; }
		
		//SingleStatement
		public RuleCall getStatementsSingleStatementParserRuleCall_2_0_0_0() { return cStatementsSingleStatementParserRuleCall_2_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }
		
		//statements+=Block
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }
		
		//Block
		public RuleCall getStatementsBlockParserRuleCall_2_1_0() { return cStatementsBlockParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SingleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLetStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForLoopStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SingleStatement:
		//	LetStatement | Block | ReturnStatement | IfStatement | ForStatement | ForLoopStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//LetStatement | Block | ReturnStatement | IfStatement | ForStatement | ForLoopStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LetStatement
		public RuleCall getLetStatementParserRuleCall_0() { return cLetStatementParserRuleCall_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_2() { return cReturnStatementParserRuleCall_2; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_3() { return cIfStatementParserRuleCall_3; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }
		
		//ForLoopStatement
		public RuleCall getForLoopStatementParserRuleCall_5() { return cForLoopStatementParserRuleCall_5; }
	}
	public class LetStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.LetStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cMaybeValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LetStatement:
		//	'let' name=ID MaybeValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' name=ID MaybeValue?
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//MaybeValue?
		public RuleCall getMaybeValueParserRuleCall_2() { return cMaybeValueParserRuleCall_2; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMaybeValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnStatement:
		//	'return' MaybeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' MaybeValue
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//MaybeValue
		public RuleCall getMaybeValueParserRuleCall_1() { return cMaybeValueParserRuleCall_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionFunctionAssignmentParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementSingleStatementParserRuleCall_4_0 = (RuleCall)cThenStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementSingleStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	'if' '(' condition=FunctionAssignment ')' thenStatement=SingleStatement ('else' elseStatement=SingleStatement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=FunctionAssignment ')' thenStatement=SingleStatement ('else' elseStatement=SingleStatement)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=FunctionAssignment
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//FunctionAssignment
		public RuleCall getConditionFunctionAssignmentParserRuleCall_2_0() { return cConditionFunctionAssignmentParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenStatement=SingleStatement
		public Assignment getThenStatementAssignment_4() { return cThenStatementAssignment_4; }
		
		//SingleStatement
		public RuleCall getThenStatementSingleStatementParserRuleCall_4_0() { return cThenStatementSingleStatementParserRuleCall_4_0; }
		
		//('else' elseStatement=SingleStatement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseStatement=SingleStatement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }
		
		//SingleStatement
		public RuleCall getElseStatementSingleStatementParserRuleCall_5_1_0() { return cElseStatementSingleStatementParserRuleCall_5_1_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitVarSingleStatementParserRuleCall_2_0 = (RuleCall)cInitVarAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionFunctionAssignmentParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndProcessingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndProcessingSingleStatementParserRuleCall_6_0 = (RuleCall)cEndProcessingAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLoopExprAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLoopExprSingleStatementParserRuleCall_8_0 = (RuleCall)cLoopExprAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	'for' '(' initVar=SingleStatement ';' condition=FunctionAssignment ';' endProcessing=SingleStatement ')'
		//	loopExpr=SingleStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' initVar=SingleStatement ';' condition=FunctionAssignment ';' endProcessing=SingleStatement ')'
		//loopExpr=SingleStatement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initVar=SingleStatement
		public Assignment getInitVarAssignment_2() { return cInitVarAssignment_2; }
		
		//SingleStatement
		public RuleCall getInitVarSingleStatementParserRuleCall_2_0() { return cInitVarSingleStatementParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=FunctionAssignment
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//FunctionAssignment
		public RuleCall getConditionFunctionAssignmentParserRuleCall_4_0() { return cConditionFunctionAssignmentParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//endProcessing=SingleStatement
		public Assignment getEndProcessingAssignment_6() { return cEndProcessingAssignment_6; }
		
		//SingleStatement
		public RuleCall getEndProcessingSingleStatementParserRuleCall_6_0() { return cEndProcessingSingleStatementParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//loopExpr=SingleStatement
		public Assignment getLoopExprAssignment_8() { return cLoopExprAssignment_8; }
		
		//SingleStatement
		public RuleCall getLoopExprSingleStatementParserRuleCall_8_0() { return cLoopExprSingleStatementParserRuleCall_8_0; }
	}
	public class ForLoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ForLoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueFunctionAssignmentParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopExprSingleStatementParserRuleCall_6_0 = (RuleCall)cLoopExprAssignment_6.eContents().get(0);
		
		//ForLoopStatement:
		//	'for' '(' name=ID ':' value=FunctionAssignment ')' loopExpr=SingleStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' name=ID ':' value=FunctionAssignment ')' loopExpr=SingleStatement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//value=FunctionAssignment
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//FunctionAssignment
		public RuleCall getValueFunctionAssignmentParserRuleCall_4_0() { return cValueFunctionAssignmentParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//loopExpr=SingleStatement
		public Assignment getLoopExprAssignment_6() { return cLoopExprAssignment_6; }
		
		//SingleStatement
		public RuleCall getLoopExprSingleStatementParserRuleCall_6_0() { return cLoopExprSingleStatementParserRuleCall_6_0; }
	}
	public class MaybeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.MaybeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFunctionAssignmentParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//fragment MaybeValue:
		//	'=' value=FunctionAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' value=FunctionAssignment
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//value=FunctionAssignment
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FunctionAssignment
		public RuleCall getValueFunctionAssignmentParserRuleCall_1_0() { return cValueFunctionAssignmentParserRuleCall_1_0; }
	}
	public class ParDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ParDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFunctionParDefParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFunctionParDefParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParDef:
		//	{ParDef}
		//	'(' (params+=FunctionParDef (',' params+=FunctionParDef)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ParDef} '(' (params+=FunctionParDef (',' params+=FunctionParDef)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ParDef}
		public Action getParDefAction_0() { return cParDefAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=FunctionParDef (',' params+=FunctionParDef)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=FunctionParDef
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//FunctionParDef
		public RuleCall getParamsFunctionParDefParserRuleCall_2_0_0() { return cParamsFunctionParDefParserRuleCall_2_0_0; }
		
		//(',' params+=FunctionParDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//params+=FunctionParDef
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//FunctionParDef
		public RuleCall getParamsFunctionParDefParserRuleCall_2_1_1_0() { return cParamsFunctionParDefParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionParDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionParDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//FunctionParDef:
		//	name=ID (':' type=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' type=ID)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' type=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=ID
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_1_0() { return cTypeIDTerminalRuleCall_1_1_0; }
	}
	public class CalculatedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.CalculatedValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfThenElseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CalculatedValue:
		//	FunctionCall | IfThenElse;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionCall | IfThenElse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0() { return cFunctionCallParserRuleCall_0; }
		
		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_1() { return cIfThenElseParserRuleCall_1; }
	}
	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionFunctionAssignmentParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExprFunctionAssignmentParserRuleCall_3_0 = (RuleCall)cThenExprAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExprFunctionAssignmentParserRuleCall_5_0 = (RuleCall)cElseExprAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfThenElse:
		//	'if' condition=FunctionAssignment 'then' thenExpr=FunctionAssignment 'else' elseExpr=FunctionAssignment 'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=FunctionAssignment 'then' thenExpr=FunctionAssignment 'else' elseExpr=FunctionAssignment 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=FunctionAssignment
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//FunctionAssignment
		public RuleCall getConditionFunctionAssignmentParserRuleCall_1_0() { return cConditionFunctionAssignmentParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpr=FunctionAssignment
		public Assignment getThenExprAssignment_3() { return cThenExprAssignment_3; }
		
		//FunctionAssignment
		public RuleCall getThenExprFunctionAssignmentParserRuleCall_3_0() { return cThenExprFunctionAssignmentParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpr=FunctionAssignment
		public Assignment getElseExprAssignment_5() { return cElseExprAssignment_5; }
		
		//FunctionAssignment
		public RuleCall getElseExprFunctionAssignmentParserRuleCall_5_0() { return cElseExprFunctionAssignmentParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionDefCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionDefIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionDefCrossReference_0_0.eContents().get(1);
		private final RuleCall cFunctionParsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionCall:
		//	function=[FunctionDef] FunctionPars;
		@Override public ParserRule getRule() { return rule; }
		
		//function=[FunctionDef] FunctionPars
		public Group getGroup() { return cGroup; }
		
		//function=[FunctionDef]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[FunctionDef]
		public CrossReference getFunctionFunctionDefCrossReference_0_0() { return cFunctionFunctionDefCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionDefIDTerminalRuleCall_0_0_1() { return cFunctionFunctionDefIDTerminalRuleCall_0_0_1; }
		
		//FunctionPars
		public RuleCall getFunctionParsParserRuleCall_1() { return cFunctionParsParserRuleCall_1; }
	}
	public class JavaFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.JavaFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionJavaFunctionDefCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionJavaFunctionDefIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionJavaFunctionDefCrossReference_1_0.eContents().get(1);
		private final RuleCall cFunctionParsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//JavaFunctionCall:
		//	'$' function=[JavaFunctionDef] FunctionPars;
		@Override public ParserRule getRule() { return rule; }
		
		//'$' function=[JavaFunctionDef] FunctionPars
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//function=[JavaFunctionDef]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[JavaFunctionDef]
		public CrossReference getFunctionJavaFunctionDefCrossReference_1_0() { return cFunctionJavaFunctionDefCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionJavaFunctionDefIDTerminalRuleCall_1_0_1() { return cFunctionJavaFunctionDefIDTerminalRuleCall_1_0_1; }
		
		//FunctionPars
		public RuleCall getFunctionParsParserRuleCall_2() { return cFunctionParsParserRuleCall_2; }
	}
	public class FunctionParsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionPars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamsFunctionParParserRuleCall_1_0_0 = (RuleCall)cParamsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsFunctionParParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment FunctionPars:
		//	'(' (params+=FunctionPar (',' params+=FunctionPar)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (params+=FunctionPar (',' params+=FunctionPar)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(params+=FunctionPar (',' params+=FunctionPar)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//params+=FunctionPar
		public Assignment getParamsAssignment_1_0() { return cParamsAssignment_1_0; }
		
		//FunctionPar
		public RuleCall getParamsFunctionParParserRuleCall_1_0_0() { return cParamsFunctionParParserRuleCall_1_0_0; }
		
		//(',' params+=FunctionPar)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//params+=FunctionPar
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }
		
		//FunctionPar
		public RuleCall getParamsFunctionParParserRuleCall_1_1_1_0() { return cParamsFunctionParParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class FunctionParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionPar");
		private final RuleCall cSingleValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionPar:
		//	SingleValue;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleValue
		public RuleCall getSingleValueParserRuleCall() { return cSingleValueParserRuleCall; }
	}
	public class ObjIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ObjId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsObjParamParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsObjParamParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ObjId:
		//	'#' name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(params+=ObjParam (',' params+=ObjParam)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//params+=ObjParam
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }
		
		//ObjParam
		public RuleCall getParamsObjParamParserRuleCall_2_1_0_0() { return cParamsObjParamParserRuleCall_2_1_0_0; }
		
		//(',' params+=ObjParam)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//params+=ObjParam
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }
		
		//ObjParam
		public RuleCall getParamsObjParamParserRuleCall_2_1_1_1_0() { return cParamsObjParamParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ObjParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ObjParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cParamsObjParamParserRuleCall_2_1_1_0_0 = (RuleCall)cParamsAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cParamsObjParamParserRuleCall_2_1_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ObjParam:
		//	number=INT | string=STRING | name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT | string=STRING | name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(params+=ObjParam (',' params+=ObjParam)*)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//params+=ObjParam
		public Assignment getParamsAssignment_2_1_1_0() { return cParamsAssignment_2_1_1_0; }
		
		//ObjParam
		public RuleCall getParamsObjParamParserRuleCall_2_1_1_0_0() { return cParamsObjParamParserRuleCall_2_1_1_0_0; }
		
		//(',' params+=ObjParam)*
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_1_0() { return cCommaKeyword_2_1_1_1_0; }
		
		//params+=ObjParam
		public Assignment getParamsAssignment_2_1_1_1_1() { return cParamsAssignment_2_1_1_1_1; }
		
		//ObjParam
		public RuleCall getParamsObjParamParserRuleCall_2_1_1_1_1_0() { return cParamsObjParamParserRuleCall_2_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	
	public class FunctionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.FunctionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFINITEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFINITEFiniteKeyword_0_0 = (Keyword)cFINITEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDERIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDERIVEDeriveKeyword_1_0 = (Keyword)cDERIVEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTRAINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONSTRAINTConstraintKeyword_2_0 = (Keyword)cCONSTRAINTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FunctionType:
		//	FINITE='finite' | DERIVE='derive' | CONSTRAINT='constraint';
		public EnumRule getRule() { return rule; }
		
		//FINITE='finite' | DERIVE='derive' | CONSTRAINT='constraint'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FINITE='finite'
		public EnumLiteralDeclaration getFINITEEnumLiteralDeclaration_0() { return cFINITEEnumLiteralDeclaration_0; }
		
		//'finite'
		public Keyword getFINITEFiniteKeyword_0_0() { return cFINITEFiniteKeyword_0_0; }
		
		//DERIVE='derive'
		public EnumLiteralDeclaration getDERIVEEnumLiteralDeclaration_1() { return cDERIVEEnumLiteralDeclaration_1; }
		
		//'derive'
		public Keyword getDERIVEDeriveKeyword_1_0() { return cDERIVEDeriveKeyword_1_0; }
		
		//CONSTRAINT='constraint'
		public EnumLiteralDeclaration getCONSTRAINTEnumLiteralDeclaration_2() { return cCONSTRAINTEnumLiteralDeclaration_2; }
		
		//'constraint'
		public Keyword getCONSTRAINTConstraintKeyword_2_0() { return cCONSTRAINTConstraintKeyword_2_0; }
	}
	public class JavaFunctionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.JavaFunctionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFUNCCALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFUNCCALLJfuncKeyword_0_0 = (Keyword)cFUNCCALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTRUCTOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONSTRUCTORJconsKeyword_1_0 = (Keyword)cCONSTRUCTOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOPERATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOPERATIONJopKeyword_2_0 = (Keyword)cOPERATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum JavaFunctionType:
		//	FUNCCALL='jfunc' | CONSTRUCTOR='jcons' | OPERATION='jop';
		public EnumRule getRule() { return rule; }
		
		//FUNCCALL='jfunc' | CONSTRUCTOR='jcons' | OPERATION='jop'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FUNCCALL='jfunc'
		public EnumLiteralDeclaration getFUNCCALLEnumLiteralDeclaration_0() { return cFUNCCALLEnumLiteralDeclaration_0; }
		
		//'jfunc'
		public Keyword getFUNCCALLJfuncKeyword_0_0() { return cFUNCCALLJfuncKeyword_0_0; }
		
		//CONSTRUCTOR='jcons'
		public EnumLiteralDeclaration getCONSTRUCTOREnumLiteralDeclaration_1() { return cCONSTRUCTOREnumLiteralDeclaration_1; }
		
		//'jcons'
		public Keyword getCONSTRUCTORJconsKeyword_1_0() { return cCONSTRUCTORJconsKeyword_1_0; }
		
		//OPERATION='jop'
		public EnumLiteralDeclaration getOPERATIONEnumLiteralDeclaration_2() { return cOPERATIONEnumLiteralDeclaration_2; }
		
		//'jop'
		public Keyword getOPERATIONJopKeyword_2_0() { return cOPERATIONJopKeyword_2_0; }
	}
	
	private final VLangElements pVLang;
	private final ImportElements pImport;
	private final AssignStatementElements pAssignStatement;
	private final SetOrFunctionDefElements pSetOrFunctionDef;
	private final FunctionDefElements pFunctionDef;
	private final JavaFunctionDefElements pJavaFunctionDef;
	private final BasicActionElements pBasicAction;
	private final SetDefElements pSetDef;
	private final SetLiteralElements pSetLiteral;
	private final RuleAssignmentElements pRuleAssignment;
	private final DeleteAssignmentElements pDeleteAssignment;
	private final FunctionScopeElements pFunctionScope;
	private final InfiniteScopeElements pInfiniteScope;
	private final FilterElements pFilter;
	private final FunctionDomainScopeElements pFunctionDomainScope;
	private final SetScopeElements pSetScope;
	private final SingleScopeElements pSingleScope;
	private final SingleValueElements pSingleValue;
	private final FixedValueElements pFixedValue;
	private final FunctionAssignmentElements pFunctionAssignment;
	private final FullFunctionAssignmentElements pFullFunctionAssignment;
	private final ExpressionElements pExpression;
	private final OclFunctionElements pOclFunction;
	private final FullFunctionElements pFullFunction;
	private final BlockElements pBlock;
	private final SingleStatementElements pSingleStatement;
	private final LetStatementElements pLetStatement;
	private final ReturnStatementElements pReturnStatement;
	private final IfStatementElements pIfStatement;
	private final ForStatementElements pForStatement;
	private final ForLoopStatementElements pForLoopStatement;
	private final MaybeValueElements pMaybeValue;
	private final ParDefElements pParDef;
	private final FunctionParDefElements pFunctionParDef;
	private final CalculatedValueElements pCalculatedValue;
	private final IfThenElseElements pIfThenElse;
	private final FunctionCallElements pFunctionCall;
	private final JavaFunctionCallElements pJavaFunctionCall;
	private final FunctionParsElements pFunctionPars;
	private final FunctionParElements pFunctionPar;
	private final ObjIdElements pObjId;
	private final ObjParamElements pObjParam;
	private final TerminalRule tESTRING;
	private final FunctionTypeElements eFunctionType;
	private final JavaFunctionTypeElements eJavaFunctionType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVLang = new VLangElements();
		this.pImport = new ImportElements();
		this.pAssignStatement = new AssignStatementElements();
		this.pSetOrFunctionDef = new SetOrFunctionDefElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pJavaFunctionDef = new JavaFunctionDefElements();
		this.pBasicAction = new BasicActionElements();
		this.pSetDef = new SetDefElements();
		this.pSetLiteral = new SetLiteralElements();
		this.pRuleAssignment = new RuleAssignmentElements();
		this.pDeleteAssignment = new DeleteAssignmentElements();
		this.pFunctionScope = new FunctionScopeElements();
		this.pInfiniteScope = new InfiniteScopeElements();
		this.pFilter = new FilterElements();
		this.pFunctionDomainScope = new FunctionDomainScopeElements();
		this.pSetScope = new SetScopeElements();
		this.pSingleScope = new SingleScopeElements();
		this.pSingleValue = new SingleValueElements();
		this.pFixedValue = new FixedValueElements();
		this.pFunctionAssignment = new FunctionAssignmentElements();
		this.pFullFunctionAssignment = new FullFunctionAssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pOclFunction = new OclFunctionElements();
		this.pFullFunction = new FullFunctionElements();
		this.pBlock = new BlockElements();
		this.pSingleStatement = new SingleStatementElements();
		this.pLetStatement = new LetStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pForLoopStatement = new ForLoopStatementElements();
		this.pMaybeValue = new MaybeValueElements();
		this.pParDef = new ParDefElements();
		this.pFunctionParDef = new FunctionParDefElements();
		this.pCalculatedValue = new CalculatedValueElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pJavaFunctionCall = new JavaFunctionCallElements();
		this.pFunctionPars = new FunctionParsElements();
		this.pFunctionPar = new FunctionParElements();
		this.pObjId = new ObjIdElements();
		this.pObjParam = new ObjParamElements();
		this.tESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.virtmodel.VLang.ESTRING");
		this.eFunctionType = new FunctionTypeElements();
		this.eJavaFunctionType = new JavaFunctionTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.virtmodel.VLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VLang:
	//	imports+=Import*
	//	statement+=AssignStatement*;
	public VLangElements getVLangAccess() {
		return pVLang;
	}
	
	public ParserRule getVLangRule() {
		return getVLangAccess().getRule();
	}
	
	//Import:
	//	'import' target=ESTRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//AssignStatement:
	//	(JavaFunctionDef | SetOrFunctionDef | RuleAssignment | BasicAction | DeleteAssignment) ';';
	public AssignStatementElements getAssignStatementAccess() {
		return pAssignStatement;
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}
	
	///**Definiere verschiedene Arten von Funktionen:
	// *  - Finite
	// *  - Constraintbasierte
	// *  - Ganz allgemeine
	// */ SetOrFunctionDef:
	//	SetDef | FunctionDef;
	public SetOrFunctionDefElements getSetOrFunctionDefAccess() {
		return pSetOrFunctionDef;
	}
	
	public ParserRule getSetOrFunctionDefRule() {
		return getSetOrFunctionDefAccess().getRule();
	}
	
	//FunctionDef:
	//	type=FunctionType? 'function' name=ID ':=' 'new' init=JavaFunctionCall ('=' fullAssignment=FunctionAssignment)?;
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}
	
	///**TODO: No type checking is performed ... */ JavaFunctionDef:
	//	type=JavaFunctionType name=ID '=' javaFunc=ESTRING;
	public JavaFunctionDefElements getJavaFunctionDefAccess() {
		return pJavaFunctionDef;
	}
	
	public ParserRule getJavaFunctionDefRule() {
		return getJavaFunctionDefAccess().getRule();
	}
	
	//BasicAction:
	//	thing=[SetOrFunctionDef] '.' calledFunc=ID FunctionPars;
	public BasicActionElements getBasicActionAccess() {
		return pBasicAction;
	}
	
	public ParserRule getBasicActionRule() {
		return getBasicActionAccess().getRule();
	}
	
	//SetDef:
	//	'set' name=ID ('=' literal=SetLiteral)?;
	public SetDefElements getSetDefAccess() {
		return pSetDef;
	}
	
	public ParserRule getSetDefRule() {
		return getSetDefAccess().getRule();
	}
	
	//SetLiteral:
	//	{SetLiteral}
	//	'{' (values+=FixedValue (',' values+=FixedValue)*)? '}';
	public SetLiteralElements getSetLiteralAccess() {
		return pSetLiteral;
	}
	
	public ParserRule getSetLiteralRule() {
		return getSetLiteralAccess().getRule();
	}
	
	//RuleAssignment:
	//	function=[FunctionDef] '(' scope=FunctionScope ')' (isFinite?=':=' | isDerive?='=' | isConstraint?='==')
	//	assignment=FunctionAssignment;
	public RuleAssignmentElements getRuleAssignmentAccess() {
		return pRuleAssignment;
	}
	
	public ParserRule getRuleAssignmentRule() {
		return getRuleAssignmentAccess().getRule();
	}
	
	//DeleteAssignment:
	//	'delete' function=[FunctionDef] '(' scope=FunctionScope ')';
	public DeleteAssignmentElements getDeleteAssignmentAccess() {
		return pDeleteAssignment;
	}
	
	public ParserRule getDeleteAssignmentRule() {
		return getDeleteAssignmentAccess().getRule();
	}
	
	//FunctionScope:
	//	(SingleScope | FunctionDomainScope | SetScope | InfiniteScope) ('with' filter=Filter)?;
	public FunctionScopeElements getFunctionScopeAccess() {
		return pFunctionScope;
	}
	
	public ParserRule getFunctionScopeRule() {
		return getFunctionScopeAccess().getRule();
	}
	
	//InfiniteScope:
	//	{InfiniteScope}
	//	'all';
	public InfiniteScopeElements getInfiniteScopeAccess() {
		return pInfiniteScope;
	}
	
	public ParserRule getInfiniteScopeRule() {
		return getInfiniteScopeAccess().getRule();
	}
	
	//Filter:
	//	FunctionAssignment;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//FunctionDomainScope:
	//	'@' function=[FunctionDef];
	public FunctionDomainScopeElements getFunctionDomainScopeAccess() {
		return pFunctionDomainScope;
	}
	
	public ParserRule getFunctionDomainScopeRule() {
		return getFunctionDomainScopeAccess().getRule();
	}
	
	//SetScope:
	//	'&' (setRef=[SetDef] | set=SetLiteral);
	public SetScopeElements getSetScopeAccess() {
		return pSetScope;
	}
	
	public ParserRule getSetScopeRule() {
		return getSetScopeAccess().getRule();
	}
	
	//SingleScope:
	//	value=SingleValue;
	public SingleScopeElements getSingleScopeAccess() {
		return pSingleScope;
	}
	
	public ParserRule getSingleScopeRule() {
		return getSingleScopeAccess().getRule();
	}
	
	//SingleValue:
	//	FixedValue | CalculatedValue;
	public SingleValueElements getSingleValueAccess() {
		return pSingleValue;
	}
	
	public ParserRule getSingleValueRule() {
		return getSingleValueAccess().getRule();
	}
	
	//FixedValue:
	//	number=INT | string=STRING | objid=ObjId;
	public FixedValueElements getFixedValueAccess() {
		return pFixedValue;
	}
	
	public ParserRule getFixedValueRule() {
		return getFixedValueAccess().getRule();
	}
	
	//FunctionAssignment:
	//	FullFunctionAssignment | Expression;
	public FunctionAssignmentElements getFunctionAssignmentAccess() {
		return pFunctionAssignment;
	}
	
	public ParserRule getFunctionAssignmentRule() {
		return getFunctionAssignmentAccess().getRule();
	}
	
	//FullFunctionAssignment:
	//	(parameters=ParDef '->')? expr=Expression;
	public FullFunctionAssignmentElements getFullFunctionAssignmentAccess() {
		return pFullFunctionAssignment;
	}
	
	public ParserRule getFullFunctionAssignmentRule() {
		return getFullFunctionAssignmentAccess().getRule();
	}
	
	//Expression:
	//	SingleValue | FullFunction | OclFunction;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OclFunction:
	//	'ocl' oclFunc=STRING;
	public OclFunctionElements getOclFunctionAccess() {
		return pOclFunction;
	}
	
	public ParserRule getOclFunctionRule() {
		return getOclFunctionAccess().getRule();
	}
	
	//FullFunction:
	//	Block;
	public FullFunctionElements getFullFunctionAccess() {
		return pFullFunction;
	}
	
	public ParserRule getFullFunctionRule() {
		return getFullFunctionAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'{' (statements+=SingleStatement ';' | statements+=Block)*
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//SingleStatement:
	//	LetStatement | Block | ReturnStatement | IfStatement | ForStatement | ForLoopStatement;
	public SingleStatementElements getSingleStatementAccess() {
		return pSingleStatement;
	}
	
	public ParserRule getSingleStatementRule() {
		return getSingleStatementAccess().getRule();
	}
	
	//LetStatement:
	//	'let' name=ID MaybeValue?;
	public LetStatementElements getLetStatementAccess() {
		return pLetStatement;
	}
	
	public ParserRule getLetStatementRule() {
		return getLetStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	'return' MaybeValue;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' condition=FunctionAssignment ')' thenStatement=SingleStatement ('else' elseStatement=SingleStatement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ForStatement:
	//	'for' '(' initVar=SingleStatement ';' condition=FunctionAssignment ';' endProcessing=SingleStatement ')'
	//	loopExpr=SingleStatement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ForLoopStatement:
	//	'for' '(' name=ID ':' value=FunctionAssignment ')' loopExpr=SingleStatement;
	public ForLoopStatementElements getForLoopStatementAccess() {
		return pForLoopStatement;
	}
	
	public ParserRule getForLoopStatementRule() {
		return getForLoopStatementAccess().getRule();
	}
	
	//fragment MaybeValue:
	//	'=' value=FunctionAssignment;
	public MaybeValueElements getMaybeValueAccess() {
		return pMaybeValue;
	}
	
	public ParserRule getMaybeValueRule() {
		return getMaybeValueAccess().getRule();
	}
	
	//ParDef:
	//	{ParDef}
	//	'(' (params+=FunctionParDef (',' params+=FunctionParDef)*)? ')';
	public ParDefElements getParDefAccess() {
		return pParDef;
	}
	
	public ParserRule getParDefRule() {
		return getParDefAccess().getRule();
	}
	
	//FunctionParDef:
	//	name=ID (':' type=ID)?;
	public FunctionParDefElements getFunctionParDefAccess() {
		return pFunctionParDef;
	}
	
	public ParserRule getFunctionParDefRule() {
		return getFunctionParDefAccess().getRule();
	}
	
	//CalculatedValue:
	//	FunctionCall | IfThenElse;
	public CalculatedValueElements getCalculatedValueAccess() {
		return pCalculatedValue;
	}
	
	public ParserRule getCalculatedValueRule() {
		return getCalculatedValueAccess().getRule();
	}
	
	//IfThenElse:
	//	'if' condition=FunctionAssignment 'then' thenExpr=FunctionAssignment 'else' elseExpr=FunctionAssignment 'endif';
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}
	
	//FunctionCall:
	//	function=[FunctionDef] FunctionPars;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//JavaFunctionCall:
	//	'$' function=[JavaFunctionDef] FunctionPars;
	public JavaFunctionCallElements getJavaFunctionCallAccess() {
		return pJavaFunctionCall;
	}
	
	public ParserRule getJavaFunctionCallRule() {
		return getJavaFunctionCallAccess().getRule();
	}
	
	//fragment FunctionPars:
	//	'(' (params+=FunctionPar (',' params+=FunctionPar)*)? ')';
	public FunctionParsElements getFunctionParsAccess() {
		return pFunctionPars;
	}
	
	public ParserRule getFunctionParsRule() {
		return getFunctionParsAccess().getRule();
	}
	
	//FunctionPar:
	//	SingleValue;
	public FunctionParElements getFunctionParAccess() {
		return pFunctionPar;
	}
	
	public ParserRule getFunctionParRule() {
		return getFunctionParAccess().getRule();
	}
	
	//ObjId:
	//	'#' name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?;
	public ObjIdElements getObjIdAccess() {
		return pObjId;
	}
	
	public ParserRule getObjIdRule() {
		return getObjIdAccess().getRule();
	}
	
	//ObjParam:
	//	number=INT | string=STRING | name=ID ('(' (params+=ObjParam (',' params+=ObjParam)*)? ')')?;
	public ObjParamElements getObjParamAccess() {
		return pObjParam;
	}
	
	public ParserRule getObjParamRule() {
		return getObjParamAccess().getRule();
	}
	
	//terminal ESTRING:
	//	ID | STRING;
	public TerminalRule getESTRINGRule() {
		return tESTRING;
	}
	
	//enum FunctionType:
	//	FINITE='finite' | DERIVE='derive' | CONSTRAINT='constraint';
	public FunctionTypeElements getFunctionTypeAccess() {
		return eFunctionType;
	}
	
	public EnumRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//enum JavaFunctionType:
	//	FUNCCALL='jfunc' | CONSTRUCTOR='jcons' | OPERATION='jop';
	public JavaFunctionTypeElements getJavaFunctionTypeAccess() {
		return eJavaFunctionType;
	}
	
	public EnumRule getJavaFunctionTypeRule() {
		return getJavaFunctionTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
