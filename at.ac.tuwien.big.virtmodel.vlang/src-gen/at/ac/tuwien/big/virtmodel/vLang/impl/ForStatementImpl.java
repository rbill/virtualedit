/**
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.virtmodel.vLang.impl;

import at.ac.tuwien.big.virtmodel.vLang.ForStatement;
import at.ac.tuwien.big.virtmodel.vLang.FunctionAssignment;
import at.ac.tuwien.big.virtmodel.vLang.SingleStatement;
import at.ac.tuwien.big.virtmodel.vLang.VLangPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.ac.tuwien.big.virtmodel.vLang.impl.ForStatementImpl#getInitVar <em>Init Var</em>}</li>
 *   <li>{@link at.ac.tuwien.big.virtmodel.vLang.impl.ForStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link at.ac.tuwien.big.virtmodel.vLang.impl.ForStatementImpl#getEndProcessing <em>End Processing</em>}</li>
 *   <li>{@link at.ac.tuwien.big.virtmodel.vLang.impl.ForStatementImpl#getLoopExpr <em>Loop Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForStatementImpl extends SingleStatementImpl implements ForStatement
{
  /**
   * The cached value of the '{@link #getInitVar() <em>Init Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitVar()
   * @generated
   * @ordered
   */
  protected SingleStatement initVar;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected FunctionAssignment condition;

  /**
   * The cached value of the '{@link #getEndProcessing() <em>End Processing</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndProcessing()
   * @generated
   * @ordered
   */
  protected SingleStatement endProcessing;

  /**
   * The cached value of the '{@link #getLoopExpr() <em>Loop Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoopExpr()
   * @generated
   * @ordered
   */
  protected SingleStatement loopExpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VLangPackage.Literals.FOR_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleStatement getInitVar()
  {
    return initVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitVar(SingleStatement newInitVar, NotificationChain msgs)
  {
    SingleStatement oldInitVar = initVar;
    initVar = newInitVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__INIT_VAR, oldInitVar, newInitVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitVar(SingleStatement newInitVar)
  {
    if (newInitVar != initVar)
    {
      NotificationChain msgs = null;
      if (initVar != null)
        msgs = ((InternalEObject)initVar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__INIT_VAR, null, msgs);
      if (newInitVar != null)
        msgs = ((InternalEObject)newInitVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__INIT_VAR, null, msgs);
      msgs = basicSetInitVar(newInitVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__INIT_VAR, newInitVar, newInitVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionAssignment getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(FunctionAssignment newCondition, NotificationChain msgs)
  {
    FunctionAssignment oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(FunctionAssignment newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleStatement getEndProcessing()
  {
    return endProcessing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndProcessing(SingleStatement newEndProcessing, NotificationChain msgs)
  {
    SingleStatement oldEndProcessing = endProcessing;
    endProcessing = newEndProcessing;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__END_PROCESSING, oldEndProcessing, newEndProcessing);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEndProcessing(SingleStatement newEndProcessing)
  {
    if (newEndProcessing != endProcessing)
    {
      NotificationChain msgs = null;
      if (endProcessing != null)
        msgs = ((InternalEObject)endProcessing).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__END_PROCESSING, null, msgs);
      if (newEndProcessing != null)
        msgs = ((InternalEObject)newEndProcessing).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__END_PROCESSING, null, msgs);
      msgs = basicSetEndProcessing(newEndProcessing, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__END_PROCESSING, newEndProcessing, newEndProcessing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleStatement getLoopExpr()
  {
    return loopExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoopExpr(SingleStatement newLoopExpr, NotificationChain msgs)
  {
    SingleStatement oldLoopExpr = loopExpr;
    loopExpr = newLoopExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__LOOP_EXPR, oldLoopExpr, newLoopExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLoopExpr(SingleStatement newLoopExpr)
  {
    if (newLoopExpr != loopExpr)
    {
      NotificationChain msgs = null;
      if (loopExpr != null)
        msgs = ((InternalEObject)loopExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__LOOP_EXPR, null, msgs);
      if (newLoopExpr != null)
        msgs = ((InternalEObject)newLoopExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VLangPackage.FOR_STATEMENT__LOOP_EXPR, null, msgs);
      msgs = basicSetLoopExpr(newLoopExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VLangPackage.FOR_STATEMENT__LOOP_EXPR, newLoopExpr, newLoopExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VLangPackage.FOR_STATEMENT__INIT_VAR:
        return basicSetInitVar(null, msgs);
      case VLangPackage.FOR_STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case VLangPackage.FOR_STATEMENT__END_PROCESSING:
        return basicSetEndProcessing(null, msgs);
      case VLangPackage.FOR_STATEMENT__LOOP_EXPR:
        return basicSetLoopExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VLangPackage.FOR_STATEMENT__INIT_VAR:
        return getInitVar();
      case VLangPackage.FOR_STATEMENT__CONDITION:
        return getCondition();
      case VLangPackage.FOR_STATEMENT__END_PROCESSING:
        return getEndProcessing();
      case VLangPackage.FOR_STATEMENT__LOOP_EXPR:
        return getLoopExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VLangPackage.FOR_STATEMENT__INIT_VAR:
        setInitVar((SingleStatement)newValue);
        return;
      case VLangPackage.FOR_STATEMENT__CONDITION:
        setCondition((FunctionAssignment)newValue);
        return;
      case VLangPackage.FOR_STATEMENT__END_PROCESSING:
        setEndProcessing((SingleStatement)newValue);
        return;
      case VLangPackage.FOR_STATEMENT__LOOP_EXPR:
        setLoopExpr((SingleStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VLangPackage.FOR_STATEMENT__INIT_VAR:
        setInitVar((SingleStatement)null);
        return;
      case VLangPackage.FOR_STATEMENT__CONDITION:
        setCondition((FunctionAssignment)null);
        return;
      case VLangPackage.FOR_STATEMENT__END_PROCESSING:
        setEndProcessing((SingleStatement)null);
        return;
      case VLangPackage.FOR_STATEMENT__LOOP_EXPR:
        setLoopExpr((SingleStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VLangPackage.FOR_STATEMENT__INIT_VAR:
        return initVar != null;
      case VLangPackage.FOR_STATEMENT__CONDITION:
        return condition != null;
      case VLangPackage.FOR_STATEMENT__END_PROCESSING:
        return endProcessing != null;
      case VLangPackage.FOR_STATEMENT__LOOP_EXPR:
        return loopExpr != null;
    }
    return super.eIsSet(featureID);
  }

} //ForStatementImpl
