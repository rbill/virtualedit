/**
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.virtmodel.vLang.impl;

import at.ac.tuwien.big.virtmodel.vLang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VLangFactoryImpl extends EFactoryImpl implements VLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VLangFactory init()
  {
    try
    {
      VLangFactory theVLangFactory = (VLangFactory)EPackage.Registry.INSTANCE.getEFactory(VLangPackage.eNS_URI);
      if (theVLangFactory != null)
      {
        return theVLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VLangPackage.VLANG: return createVLang();
      case VLangPackage.IMPORT: return createImport();
      case VLangPackage.ASSIGN_STATEMENT: return createAssignStatement();
      case VLangPackage.SET_OR_FUNCTION_DEF: return createSetOrFunctionDef();
      case VLangPackage.FUNCTION_DEF: return createFunctionDef();
      case VLangPackage.JAVA_FUNCTION_DEF: return createJavaFunctionDef();
      case VLangPackage.BASIC_ACTION: return createBasicAction();
      case VLangPackage.SET_DEF: return createSetDef();
      case VLangPackage.SET_LITERAL: return createSetLiteral();
      case VLangPackage.RULE_ASSIGNMENT: return createRuleAssignment();
      case VLangPackage.DELETE_ASSIGNMENT: return createDeleteAssignment();
      case VLangPackage.FUNCTION_SCOPE: return createFunctionScope();
      case VLangPackage.INFINITE_SCOPE: return createInfiniteScope();
      case VLangPackage.FILTER: return createFilter();
      case VLangPackage.FUNCTION_DOMAIN_SCOPE: return createFunctionDomainScope();
      case VLangPackage.SET_SCOPE: return createSetScope();
      case VLangPackage.SINGLE_SCOPE: return createSingleScope();
      case VLangPackage.SINGLE_VALUE: return createSingleValue();
      case VLangPackage.FIXED_VALUE: return createFixedValue();
      case VLangPackage.FUNCTION_ASSIGNMENT: return createFunctionAssignment();
      case VLangPackage.FULL_FUNCTION_ASSIGNMENT: return createFullFunctionAssignment();
      case VLangPackage.EXPRESSION: return createExpression();
      case VLangPackage.OCL_FUNCTION: return createOclFunction();
      case VLangPackage.FULL_FUNCTION: return createFullFunction();
      case VLangPackage.BLOCK: return createBlock();
      case VLangPackage.SINGLE_STATEMENT: return createSingleStatement();
      case VLangPackage.LET_STATEMENT: return createLetStatement();
      case VLangPackage.RETURN_STATEMENT: return createReturnStatement();
      case VLangPackage.IF_STATEMENT: return createIfStatement();
      case VLangPackage.FOR_STATEMENT: return createForStatement();
      case VLangPackage.FOR_LOOP_STATEMENT: return createForLoopStatement();
      case VLangPackage.MAYBE_VALUE: return createMaybeValue();
      case VLangPackage.PAR_DEF: return createParDef();
      case VLangPackage.FUNCTION_PAR_DEF: return createFunctionParDef();
      case VLangPackage.CALCULATED_VALUE: return createCalculatedValue();
      case VLangPackage.IF_THEN_ELSE: return createIfThenElse();
      case VLangPackage.FUNCTION_CALL: return createFunctionCall();
      case VLangPackage.JAVA_FUNCTION_CALL: return createJavaFunctionCall();
      case VLangPackage.FUNCTION_PARS: return createFunctionPars();
      case VLangPackage.FUNCTION_PAR: return createFunctionPar();
      case VLangPackage.OBJ_ID: return createObjId();
      case VLangPackage.OBJ_PARAM: return createObjParam();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case VLangPackage.FUNCTION_TYPE:
        return createFunctionTypeFromString(eDataType, initialValue);
      case VLangPackage.JAVA_FUNCTION_TYPE:
        return createJavaFunctionTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case VLangPackage.FUNCTION_TYPE:
        return convertFunctionTypeToString(eDataType, instanceValue);
      case VLangPackage.JAVA_FUNCTION_TYPE:
        return convertJavaFunctionTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VLang createVLang()
  {
    VLangImpl vLang = new VLangImpl();
    return vLang;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignStatement createAssignStatement()
  {
    AssignStatementImpl assignStatement = new AssignStatementImpl();
    return assignStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetOrFunctionDef createSetOrFunctionDef()
  {
    SetOrFunctionDefImpl setOrFunctionDef = new SetOrFunctionDefImpl();
    return setOrFunctionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDef createFunctionDef()
  {
    FunctionDefImpl functionDef = new FunctionDefImpl();
    return functionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JavaFunctionDef createJavaFunctionDef()
  {
    JavaFunctionDefImpl javaFunctionDef = new JavaFunctionDefImpl();
    return javaFunctionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicAction createBasicAction()
  {
    BasicActionImpl basicAction = new BasicActionImpl();
    return basicAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetDef createSetDef()
  {
    SetDefImpl setDef = new SetDefImpl();
    return setDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetLiteral createSetLiteral()
  {
    SetLiteralImpl setLiteral = new SetLiteralImpl();
    return setLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleAssignment createRuleAssignment()
  {
    RuleAssignmentImpl ruleAssignment = new RuleAssignmentImpl();
    return ruleAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeleteAssignment createDeleteAssignment()
  {
    DeleteAssignmentImpl deleteAssignment = new DeleteAssignmentImpl();
    return deleteAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionScope createFunctionScope()
  {
    FunctionScopeImpl functionScope = new FunctionScopeImpl();
    return functionScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfiniteScope createInfiniteScope()
  {
    InfiniteScopeImpl infiniteScope = new InfiniteScopeImpl();
    return infiniteScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDomainScope createFunctionDomainScope()
  {
    FunctionDomainScopeImpl functionDomainScope = new FunctionDomainScopeImpl();
    return functionDomainScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetScope createSetScope()
  {
    SetScopeImpl setScope = new SetScopeImpl();
    return setScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleScope createSingleScope()
  {
    SingleScopeImpl singleScope = new SingleScopeImpl();
    return singleScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleValue createSingleValue()
  {
    SingleValueImpl singleValue = new SingleValueImpl();
    return singleValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FixedValue createFixedValue()
  {
    FixedValueImpl fixedValue = new FixedValueImpl();
    return fixedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionAssignment createFunctionAssignment()
  {
    FunctionAssignmentImpl functionAssignment = new FunctionAssignmentImpl();
    return functionAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FullFunctionAssignment createFullFunctionAssignment()
  {
    FullFunctionAssignmentImpl fullFunctionAssignment = new FullFunctionAssignmentImpl();
    return fullFunctionAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclFunction createOclFunction()
  {
    OclFunctionImpl oclFunction = new OclFunctionImpl();
    return oclFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FullFunction createFullFunction()
  {
    FullFunctionImpl fullFunction = new FullFunctionImpl();
    return fullFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleStatement createSingleStatement()
  {
    SingleStatementImpl singleStatement = new SingleStatementImpl();
    return singleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetStatement createLetStatement()
  {
    LetStatementImpl letStatement = new LetStatementImpl();
    return letStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForLoopStatement createForLoopStatement()
  {
    ForLoopStatementImpl forLoopStatement = new ForLoopStatementImpl();
    return forLoopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaybeValue createMaybeValue()
  {
    MaybeValueImpl maybeValue = new MaybeValueImpl();
    return maybeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParDef createParDef()
  {
    ParDefImpl parDef = new ParDefImpl();
    return parDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionParDef createFunctionParDef()
  {
    FunctionParDefImpl functionParDef = new FunctionParDefImpl();
    return functionParDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CalculatedValue createCalculatedValue()
  {
    CalculatedValueImpl calculatedValue = new CalculatedValueImpl();
    return calculatedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfThenElse createIfThenElse()
  {
    IfThenElseImpl ifThenElse = new IfThenElseImpl();
    return ifThenElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JavaFunctionCall createJavaFunctionCall()
  {
    JavaFunctionCallImpl javaFunctionCall = new JavaFunctionCallImpl();
    return javaFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionPars createFunctionPars()
  {
    FunctionParsImpl functionPars = new FunctionParsImpl();
    return functionPars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionPar createFunctionPar()
  {
    FunctionParImpl functionPar = new FunctionParImpl();
    return functionPar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjId createObjId()
  {
    ObjIdImpl objId = new ObjIdImpl();
    return objId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjParam createObjParam()
  {
    ObjParamImpl objParam = new ObjParamImpl();
    return objParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionType createFunctionTypeFromString(EDataType eDataType, String initialValue)
  {
    FunctionType result = FunctionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFunctionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JavaFunctionType createJavaFunctionTypeFromString(EDataType eDataType, String initialValue)
  {
    JavaFunctionType result = JavaFunctionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJavaFunctionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VLangPackage getVLangPackage()
  {
    return (VLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VLangPackage getPackage()
  {
    return VLangPackage.eINSTANCE;
  }

} //VLangFactoryImpl
