/**
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.virtmodel.vLang.impl;

import at.ac.tuwien.big.virtmodel.vLang.AssignStatement;
import at.ac.tuwien.big.virtmodel.vLang.BasicAction;
import at.ac.tuwien.big.virtmodel.vLang.BasicExpression;
import at.ac.tuwien.big.virtmodel.vLang.Block;
import at.ac.tuwien.big.virtmodel.vLang.CalculatedValue;
import at.ac.tuwien.big.virtmodel.vLang.DeleteAssignment;
import at.ac.tuwien.big.virtmodel.vLang.Expression;
import at.ac.tuwien.big.virtmodel.vLang.Filter;
import at.ac.tuwien.big.virtmodel.vLang.FixedValue;
import at.ac.tuwien.big.virtmodel.vLang.ForLoopStatement;
import at.ac.tuwien.big.virtmodel.vLang.ForStatement;
import at.ac.tuwien.big.virtmodel.vLang.FullFunction;
import at.ac.tuwien.big.virtmodel.vLang.FullFunctionAssignment;
import at.ac.tuwien.big.virtmodel.vLang.FunctionAssignment;
import at.ac.tuwien.big.virtmodel.vLang.FunctionCall;
import at.ac.tuwien.big.virtmodel.vLang.FunctionDef;
import at.ac.tuwien.big.virtmodel.vLang.FunctionDomainScope;
import at.ac.tuwien.big.virtmodel.vLang.FunctionPar;
import at.ac.tuwien.big.virtmodel.vLang.FunctionParDef;
import at.ac.tuwien.big.virtmodel.vLang.FunctionPars;
import at.ac.tuwien.big.virtmodel.vLang.FunctionScope;
import at.ac.tuwien.big.virtmodel.vLang.FunctionType;
import at.ac.tuwien.big.virtmodel.vLang.IfStatement;
import at.ac.tuwien.big.virtmodel.vLang.IfThenElse;
import at.ac.tuwien.big.virtmodel.vLang.Import;
import at.ac.tuwien.big.virtmodel.vLang.InfiniteScope;
import at.ac.tuwien.big.virtmodel.vLang.JavaFunctionCall;
import at.ac.tuwien.big.virtmodel.vLang.JavaFunctionDef;
import at.ac.tuwien.big.virtmodel.vLang.JavaFunctionType;
import at.ac.tuwien.big.virtmodel.vLang.LetStatement;
import at.ac.tuwien.big.virtmodel.vLang.MaybeValue;
import at.ac.tuwien.big.virtmodel.vLang.ObjId;
import at.ac.tuwien.big.virtmodel.vLang.ObjParam;
import at.ac.tuwien.big.virtmodel.vLang.OclFunction;
import at.ac.tuwien.big.virtmodel.vLang.ParDef;
import at.ac.tuwien.big.virtmodel.vLang.ReturnStatement;
import at.ac.tuwien.big.virtmodel.vLang.RuleAssignment;
import at.ac.tuwien.big.virtmodel.vLang.SetDef;
import at.ac.tuwien.big.virtmodel.vLang.SetLiteral;
import at.ac.tuwien.big.virtmodel.vLang.SetOrFunctionDef;
import at.ac.tuwien.big.virtmodel.vLang.SetScope;
import at.ac.tuwien.big.virtmodel.vLang.SingleScope;
import at.ac.tuwien.big.virtmodel.vLang.SingleStatement;
import at.ac.tuwien.big.virtmodel.vLang.SingleValue;
import at.ac.tuwien.big.virtmodel.vLang.VLang;
import at.ac.tuwien.big.virtmodel.vLang.VLangFactory;
import at.ac.tuwien.big.virtmodel.vLang.VLangPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VLangPackageImpl extends EPackageImpl implements VLangPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vLangEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass importEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setOrFunctionDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass javaFunctionDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicActionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deleteAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infiniteScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass filterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionDomainScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fixedValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fullFunctionAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass oclFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fullFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass blockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass returnStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forLoopStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass maybeValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionParDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass calculatedValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifThenElseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass javaFunctionCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionParsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionParEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass objIdEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass objParamEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum functionTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum javaFunctionTypeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see at.ac.tuwien.big.virtmodel.vLang.VLangPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private VLangPackageImpl()
  {
    super(eNS_URI, VLangFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link VLangPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static VLangPackage init()
  {
    if (isInited) return (VLangPackage)EPackage.Registry.INSTANCE.getEPackage(VLangPackage.eNS_URI);

    // Obtain or create and register package
    VLangPackageImpl theVLangPackage = (VLangPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof VLangPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new VLangPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theVLangPackage.createPackageContents();

    // Initialize created meta-data
    theVLangPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theVLangPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(VLangPackage.eNS_URI, theVLangPackage);
    return theVLangPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getVLang()
  {
    return vLangEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getVLang_Imports()
  {
    return (EReference)vLangEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getVLang_Statement()
  {
    return (EReference)vLangEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getImport()
  {
    return importEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getImport_Target()
  {
    return (EAttribute)importEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignStatement()
  {
    return assignStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetOrFunctionDef()
  {
    return setOrFunctionDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSetOrFunctionDef_Name()
  {
    return (EAttribute)setOrFunctionDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionDef()
  {
    return functionDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionDef_Type()
  {
    return (EAttribute)functionDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionDef_Init()
  {
    return (EReference)functionDefEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionDef_FullAssignment()
  {
    return (EReference)functionDefEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getJavaFunctionDef()
  {
    return javaFunctionDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getJavaFunctionDef_Type()
  {
    return (EAttribute)javaFunctionDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getJavaFunctionDef_Name()
  {
    return (EAttribute)javaFunctionDefEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getJavaFunctionDef_JavaFunc()
  {
    return (EAttribute)javaFunctionDefEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBasicAction()
  {
    return basicActionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBasicAction_Thing()
  {
    return (EReference)basicActionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBasicAction_CalledFunc()
  {
    return (EAttribute)basicActionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetDef()
  {
    return setDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetDef_Literal()
  {
    return (EReference)setDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetLiteral()
  {
    return setLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetLiteral_Values()
  {
    return (EReference)setLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRuleAssignment()
  {
    return ruleAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRuleAssignment_Function()
  {
    return (EReference)ruleAssignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRuleAssignment_Scope()
  {
    return (EReference)ruleAssignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRuleAssignment_IsFinite()
  {
    return (EAttribute)ruleAssignmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRuleAssignment_IsDerive()
  {
    return (EAttribute)ruleAssignmentEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRuleAssignment_IsConstraint()
  {
    return (EAttribute)ruleAssignmentEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRuleAssignment_Assignment()
  {
    return (EReference)ruleAssignmentEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDeleteAssignment()
  {
    return deleteAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDeleteAssignment_Function()
  {
    return (EReference)deleteAssignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDeleteAssignment_Scope()
  {
    return (EReference)deleteAssignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionScope()
  {
    return functionScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionScope_Filter()
  {
    return (EReference)functionScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInfiniteScope()
  {
    return infiniteScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFilter()
  {
    return filterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionDomainScope()
  {
    return functionDomainScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionDomainScope_Function()
  {
    return (EReference)functionDomainScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetScope()
  {
    return setScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetScope_SetRef()
  {
    return (EReference)setScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetScope_Set()
  {
    return (EReference)setScopeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleScope()
  {
    return singleScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSingleScope_Value()
  {
    return (EReference)singleScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleValue()
  {
    return singleValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFixedValue()
  {
    return fixedValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFixedValue_Number()
  {
    return (EAttribute)fixedValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFixedValue_String()
  {
    return (EAttribute)fixedValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFixedValue_Objid()
  {
    return (EReference)fixedValueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionAssignment()
  {
    return functionAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFullFunctionAssignment()
  {
    return fullFunctionAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFullFunctionAssignment_Parameters()
  {
    return (EReference)fullFunctionAssignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFullFunctionAssignment_Expr()
  {
    return (EReference)fullFunctionAssignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBasicExpression()
  {
    return basicExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpression()
  {
    return expressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOclFunction()
  {
    return oclFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getOclFunction_OclFunc()
  {
    return (EAttribute)oclFunctionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFullFunction()
  {
    return fullFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBlock()
  {
    return blockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBlock_Statements()
  {
    return (EReference)blockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleStatement()
  {
    return singleStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLetStatement()
  {
    return letStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLetStatement_Name()
  {
    return (EAttribute)letStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReturnStatement()
  {
    return returnStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIfStatement()
  {
    return ifStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_Condition()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_ThenStatement()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_ElseStatement()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForStatement()
  {
    return forStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForStatement_InitVar()
  {
    return (EReference)forStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForStatement_Condition()
  {
    return (EReference)forStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForStatement_EndProcessing()
  {
    return (EReference)forStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForStatement_LoopExpr()
  {
    return (EReference)forStatementEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForLoopStatement()
  {
    return forLoopStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getForLoopStatement_Name()
  {
    return (EAttribute)forLoopStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForLoopStatement_Value()
  {
    return (EReference)forLoopStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForLoopStatement_LoopExpr()
  {
    return (EReference)forLoopStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMaybeValue()
  {
    return maybeValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMaybeValue_Value()
  {
    return (EReference)maybeValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParDef()
  {
    return parDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParDef_Params()
  {
    return (EReference)parDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionParDef()
  {
    return functionParDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionParDef_Name()
  {
    return (EAttribute)functionParDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionParDef_Type()
  {
    return (EAttribute)functionParDefEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCalculatedValue()
  {
    return calculatedValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIfThenElse()
  {
    return ifThenElseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfThenElse_Condition()
  {
    return (EReference)ifThenElseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfThenElse_ThenExpr()
  {
    return (EReference)ifThenElseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfThenElse_ElseExpr()
  {
    return (EReference)ifThenElseEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionCall()
  {
    return functionCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionCall_Function()
  {
    return (EReference)functionCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getJavaFunctionCall()
  {
    return javaFunctionCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getJavaFunctionCall_Function()
  {
    return (EReference)javaFunctionCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionPars()
  {
    return functionParsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionPars_Params()
  {
    return (EReference)functionParsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionPar()
  {
    return functionParEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getObjId()
  {
    return objIdEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjId_Name()
  {
    return (EAttribute)objIdEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getObjId_Params()
  {
    return (EReference)objIdEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getObjParam()
  {
    return objParamEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjParam_Number()
  {
    return (EAttribute)objParamEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjParam_String()
  {
    return (EAttribute)objParamEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjParam_Name()
  {
    return (EAttribute)objParamEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getObjParam_Params()
  {
    return (EReference)objParamEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getFunctionType()
  {
    return functionTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getJavaFunctionType()
  {
    return javaFunctionTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VLangFactory getVLangFactory()
  {
    return (VLangFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    vLangEClass = createEClass(VLANG);
    createEReference(vLangEClass, VLANG__IMPORTS);
    createEReference(vLangEClass, VLANG__STATEMENT);

    importEClass = createEClass(IMPORT);
    createEAttribute(importEClass, IMPORT__TARGET);

    assignStatementEClass = createEClass(ASSIGN_STATEMENT);

    setOrFunctionDefEClass = createEClass(SET_OR_FUNCTION_DEF);
    createEAttribute(setOrFunctionDefEClass, SET_OR_FUNCTION_DEF__NAME);

    functionDefEClass = createEClass(FUNCTION_DEF);
    createEAttribute(functionDefEClass, FUNCTION_DEF__TYPE);
    createEReference(functionDefEClass, FUNCTION_DEF__INIT);
    createEReference(functionDefEClass, FUNCTION_DEF__FULL_ASSIGNMENT);

    javaFunctionDefEClass = createEClass(JAVA_FUNCTION_DEF);
    createEAttribute(javaFunctionDefEClass, JAVA_FUNCTION_DEF__TYPE);
    createEAttribute(javaFunctionDefEClass, JAVA_FUNCTION_DEF__NAME);
    createEAttribute(javaFunctionDefEClass, JAVA_FUNCTION_DEF__JAVA_FUNC);

    basicActionEClass = createEClass(BASIC_ACTION);
    createEReference(basicActionEClass, BASIC_ACTION__THING);
    createEAttribute(basicActionEClass, BASIC_ACTION__CALLED_FUNC);

    setDefEClass = createEClass(SET_DEF);
    createEReference(setDefEClass, SET_DEF__LITERAL);

    setLiteralEClass = createEClass(SET_LITERAL);
    createEReference(setLiteralEClass, SET_LITERAL__VALUES);

    ruleAssignmentEClass = createEClass(RULE_ASSIGNMENT);
    createEReference(ruleAssignmentEClass, RULE_ASSIGNMENT__FUNCTION);
    createEReference(ruleAssignmentEClass, RULE_ASSIGNMENT__SCOPE);
    createEAttribute(ruleAssignmentEClass, RULE_ASSIGNMENT__IS_FINITE);
    createEAttribute(ruleAssignmentEClass, RULE_ASSIGNMENT__IS_DERIVE);
    createEAttribute(ruleAssignmentEClass, RULE_ASSIGNMENT__IS_CONSTRAINT);
    createEReference(ruleAssignmentEClass, RULE_ASSIGNMENT__ASSIGNMENT);

    deleteAssignmentEClass = createEClass(DELETE_ASSIGNMENT);
    createEReference(deleteAssignmentEClass, DELETE_ASSIGNMENT__FUNCTION);
    createEReference(deleteAssignmentEClass, DELETE_ASSIGNMENT__SCOPE);

    functionScopeEClass = createEClass(FUNCTION_SCOPE);
    createEReference(functionScopeEClass, FUNCTION_SCOPE__FILTER);

    infiniteScopeEClass = createEClass(INFINITE_SCOPE);

    filterEClass = createEClass(FILTER);

    functionDomainScopeEClass = createEClass(FUNCTION_DOMAIN_SCOPE);
    createEReference(functionDomainScopeEClass, FUNCTION_DOMAIN_SCOPE__FUNCTION);

    setScopeEClass = createEClass(SET_SCOPE);
    createEReference(setScopeEClass, SET_SCOPE__SET_REF);
    createEReference(setScopeEClass, SET_SCOPE__SET);

    singleScopeEClass = createEClass(SINGLE_SCOPE);
    createEReference(singleScopeEClass, SINGLE_SCOPE__VALUE);

    singleValueEClass = createEClass(SINGLE_VALUE);

    fixedValueEClass = createEClass(FIXED_VALUE);
    createEAttribute(fixedValueEClass, FIXED_VALUE__NUMBER);
    createEAttribute(fixedValueEClass, FIXED_VALUE__STRING);
    createEReference(fixedValueEClass, FIXED_VALUE__OBJID);

    functionAssignmentEClass = createEClass(FUNCTION_ASSIGNMENT);

    fullFunctionAssignmentEClass = createEClass(FULL_FUNCTION_ASSIGNMENT);
    createEReference(fullFunctionAssignmentEClass, FULL_FUNCTION_ASSIGNMENT__PARAMETERS);
    createEReference(fullFunctionAssignmentEClass, FULL_FUNCTION_ASSIGNMENT__EXPR);

    basicExpressionEClass = createEClass(BASIC_EXPRESSION);

    expressionEClass = createEClass(EXPRESSION);

    oclFunctionEClass = createEClass(OCL_FUNCTION);
    createEAttribute(oclFunctionEClass, OCL_FUNCTION__OCL_FUNC);

    fullFunctionEClass = createEClass(FULL_FUNCTION);

    blockEClass = createEClass(BLOCK);
    createEReference(blockEClass, BLOCK__STATEMENTS);

    singleStatementEClass = createEClass(SINGLE_STATEMENT);

    letStatementEClass = createEClass(LET_STATEMENT);
    createEAttribute(letStatementEClass, LET_STATEMENT__NAME);

    returnStatementEClass = createEClass(RETURN_STATEMENT);

    ifStatementEClass = createEClass(IF_STATEMENT);
    createEReference(ifStatementEClass, IF_STATEMENT__CONDITION);
    createEReference(ifStatementEClass, IF_STATEMENT__THEN_STATEMENT);
    createEReference(ifStatementEClass, IF_STATEMENT__ELSE_STATEMENT);

    forStatementEClass = createEClass(FOR_STATEMENT);
    createEReference(forStatementEClass, FOR_STATEMENT__INIT_VAR);
    createEReference(forStatementEClass, FOR_STATEMENT__CONDITION);
    createEReference(forStatementEClass, FOR_STATEMENT__END_PROCESSING);
    createEReference(forStatementEClass, FOR_STATEMENT__LOOP_EXPR);

    forLoopStatementEClass = createEClass(FOR_LOOP_STATEMENT);
    createEAttribute(forLoopStatementEClass, FOR_LOOP_STATEMENT__NAME);
    createEReference(forLoopStatementEClass, FOR_LOOP_STATEMENT__VALUE);
    createEReference(forLoopStatementEClass, FOR_LOOP_STATEMENT__LOOP_EXPR);

    maybeValueEClass = createEClass(MAYBE_VALUE);
    createEReference(maybeValueEClass, MAYBE_VALUE__VALUE);

    parDefEClass = createEClass(PAR_DEF);
    createEReference(parDefEClass, PAR_DEF__PARAMS);

    functionParDefEClass = createEClass(FUNCTION_PAR_DEF);
    createEAttribute(functionParDefEClass, FUNCTION_PAR_DEF__NAME);
    createEAttribute(functionParDefEClass, FUNCTION_PAR_DEF__TYPE);

    calculatedValueEClass = createEClass(CALCULATED_VALUE);

    ifThenElseEClass = createEClass(IF_THEN_ELSE);
    createEReference(ifThenElseEClass, IF_THEN_ELSE__CONDITION);
    createEReference(ifThenElseEClass, IF_THEN_ELSE__THEN_EXPR);
    createEReference(ifThenElseEClass, IF_THEN_ELSE__ELSE_EXPR);

    functionCallEClass = createEClass(FUNCTION_CALL);
    createEReference(functionCallEClass, FUNCTION_CALL__FUNCTION);

    javaFunctionCallEClass = createEClass(JAVA_FUNCTION_CALL);
    createEReference(javaFunctionCallEClass, JAVA_FUNCTION_CALL__FUNCTION);

    functionParsEClass = createEClass(FUNCTION_PARS);
    createEReference(functionParsEClass, FUNCTION_PARS__PARAMS);

    functionParEClass = createEClass(FUNCTION_PAR);

    objIdEClass = createEClass(OBJ_ID);
    createEAttribute(objIdEClass, OBJ_ID__NAME);
    createEReference(objIdEClass, OBJ_ID__PARAMS);

    objParamEClass = createEClass(OBJ_PARAM);
    createEAttribute(objParamEClass, OBJ_PARAM__NUMBER);
    createEAttribute(objParamEClass, OBJ_PARAM__STRING);
    createEAttribute(objParamEClass, OBJ_PARAM__NAME);
    createEReference(objParamEClass, OBJ_PARAM__PARAMS);

    // Create enums
    functionTypeEEnum = createEEnum(FUNCTION_TYPE);
    javaFunctionTypeEEnum = createEEnum(JAVA_FUNCTION_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    setOrFunctionDefEClass.getESuperTypes().add(this.getAssignStatement());
    functionDefEClass.getESuperTypes().add(this.getSetOrFunctionDef());
    javaFunctionDefEClass.getESuperTypes().add(this.getAssignStatement());
    basicActionEClass.getESuperTypes().add(this.getAssignStatement());
    basicActionEClass.getESuperTypes().add(this.getFunctionPars());
    setDefEClass.getESuperTypes().add(this.getSetOrFunctionDef());
    ruleAssignmentEClass.getESuperTypes().add(this.getAssignStatement());
    deleteAssignmentEClass.getESuperTypes().add(this.getAssignStatement());
    infiniteScopeEClass.getESuperTypes().add(this.getFunctionScope());
    functionDomainScopeEClass.getESuperTypes().add(this.getFunctionScope());
    setScopeEClass.getESuperTypes().add(this.getFunctionScope());
    singleScopeEClass.getESuperTypes().add(this.getFunctionScope());
    singleValueEClass.getESuperTypes().add(this.getBasicExpression());
    singleValueEClass.getESuperTypes().add(this.getExpression());
    singleValueEClass.getESuperTypes().add(this.getFunctionPar());
    fixedValueEClass.getESuperTypes().add(this.getSingleValue());
    functionAssignmentEClass.getESuperTypes().add(this.getFilter());
    fullFunctionAssignmentEClass.getESuperTypes().add(this.getFunctionAssignment());
    basicExpressionEClass.getESuperTypes().add(this.getFunctionAssignment());
    oclFunctionEClass.getESuperTypes().add(this.getBasicExpression());
    oclFunctionEClass.getESuperTypes().add(this.getExpression());
    fullFunctionEClass.getESuperTypes().add(this.getExpression());
    blockEClass.getESuperTypes().add(this.getFullFunction());
    blockEClass.getESuperTypes().add(this.getSingleStatement());
    letStatementEClass.getESuperTypes().add(this.getSingleStatement());
    letStatementEClass.getESuperTypes().add(this.getMaybeValue());
    returnStatementEClass.getESuperTypes().add(this.getSingleStatement());
    returnStatementEClass.getESuperTypes().add(this.getMaybeValue());
    ifStatementEClass.getESuperTypes().add(this.getSingleStatement());
    forStatementEClass.getESuperTypes().add(this.getSingleStatement());
    forLoopStatementEClass.getESuperTypes().add(this.getSingleStatement());
    calculatedValueEClass.getESuperTypes().add(this.getSingleValue());
    ifThenElseEClass.getESuperTypes().add(this.getCalculatedValue());
    functionCallEClass.getESuperTypes().add(this.getCalculatedValue());
    functionCallEClass.getESuperTypes().add(this.getFunctionPars());
    javaFunctionCallEClass.getESuperTypes().add(this.getCalculatedValue());
    javaFunctionCallEClass.getESuperTypes().add(this.getFunctionPars());

    // Initialize classes and features; add operations and parameters
    initEClass(vLangEClass, VLang.class, "VLang", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVLang_Imports(), this.getImport(), null, "imports", null, 0, -1, VLang.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVLang_Statement(), this.getAssignStatement(), null, "statement", null, 0, -1, VLang.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(importEClass, Import.class, "Import", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getImport_Target(), ecorePackage.getEString(), "target", null, 0, 1, Import.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignStatementEClass, AssignStatement.class, "AssignStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(setOrFunctionDefEClass, SetOrFunctionDef.class, "SetOrFunctionDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSetOrFunctionDef_Name(), ecorePackage.getEString(), "name", null, 0, 1, SetOrFunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionDefEClass, FunctionDef.class, "FunctionDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionDef_Type(), this.getFunctionType(), "type", null, 0, 1, FunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionDef_Init(), this.getJavaFunctionCall(), null, "init", null, 0, 1, FunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionDef_FullAssignment(), this.getFunctionAssignment(), null, "fullAssignment", null, 0, 1, FunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(javaFunctionDefEClass, JavaFunctionDef.class, "JavaFunctionDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJavaFunctionDef_Type(), this.getJavaFunctionType(), "type", null, 0, 1, JavaFunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJavaFunctionDef_Name(), ecorePackage.getEString(), "name", null, 0, 1, JavaFunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJavaFunctionDef_JavaFunc(), ecorePackage.getEString(), "javaFunc", null, 0, 1, JavaFunctionDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicActionEClass, BasicAction.class, "BasicAction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBasicAction_Thing(), this.getSetOrFunctionDef(), null, "thing", null, 0, 1, BasicAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBasicAction_CalledFunc(), ecorePackage.getEString(), "calledFunc", null, 0, 1, BasicAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setDefEClass, SetDef.class, "SetDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetDef_Literal(), this.getSetLiteral(), null, "literal", null, 0, 1, SetDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setLiteralEClass, SetLiteral.class, "SetLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetLiteral_Values(), this.getFixedValue(), null, "values", null, 0, -1, SetLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ruleAssignmentEClass, RuleAssignment.class, "RuleAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRuleAssignment_Function(), this.getFunctionDef(), null, "function", null, 0, 1, RuleAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleAssignment_Scope(), this.getFunctionScope(), null, "scope", null, 0, 1, RuleAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRuleAssignment_IsFinite(), ecorePackage.getEBoolean(), "isFinite", null, 0, 1, RuleAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRuleAssignment_IsDerive(), ecorePackage.getEBoolean(), "isDerive", null, 0, 1, RuleAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRuleAssignment_IsConstraint(), ecorePackage.getEBoolean(), "isConstraint", null, 0, 1, RuleAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleAssignment_Assignment(), this.getFunctionAssignment(), null, "assignment", null, 0, 1, RuleAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deleteAssignmentEClass, DeleteAssignment.class, "DeleteAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDeleteAssignment_Function(), this.getFunctionDef(), null, "function", null, 0, 1, DeleteAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeleteAssignment_Scope(), this.getFunctionScope(), null, "scope", null, 0, 1, DeleteAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionScopeEClass, FunctionScope.class, "FunctionScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFunctionScope_Filter(), this.getFilter(), null, "filter", null, 0, 1, FunctionScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(infiniteScopeEClass, InfiniteScope.class, "InfiniteScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(filterEClass, Filter.class, "Filter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(functionDomainScopeEClass, FunctionDomainScope.class, "FunctionDomainScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFunctionDomainScope_Function(), this.getFunctionDef(), null, "function", null, 0, 1, FunctionDomainScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setScopeEClass, SetScope.class, "SetScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetScope_SetRef(), this.getSetDef(), null, "setRef", null, 0, 1, SetScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetScope_Set(), this.getSetLiteral(), null, "set", null, 0, 1, SetScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleScopeEClass, SingleScope.class, "SingleScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSingleScope_Value(), this.getSingleValue(), null, "value", null, 0, 1, SingleScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleValueEClass, SingleValue.class, "SingleValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fixedValueEClass, FixedValue.class, "FixedValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFixedValue_Number(), ecorePackage.getEInt(), "number", null, 0, 1, FixedValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFixedValue_String(), ecorePackage.getEString(), "string", null, 0, 1, FixedValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFixedValue_Objid(), this.getObjId(), null, "objid", null, 0, 1, FixedValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionAssignmentEClass, FunctionAssignment.class, "FunctionAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fullFunctionAssignmentEClass, FullFunctionAssignment.class, "FullFunctionAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFullFunctionAssignment_Parameters(), this.getParDef(), null, "parameters", null, 0, 1, FullFunctionAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFullFunctionAssignment_Expr(), this.getBasicExpression(), null, "expr", null, 0, 1, FullFunctionAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicExpressionEClass, BasicExpression.class, "BasicExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionEClass, Expression.class, "Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(oclFunctionEClass, OclFunction.class, "OclFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOclFunction_OclFunc(), ecorePackage.getEString(), "oclFunc", null, 0, 1, OclFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fullFunctionEClass, FullFunction.class, "FullFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(blockEClass, Block.class, "Block", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBlock_Statements(), this.getSingleStatement(), null, "statements", null, 0, -1, Block.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleStatementEClass, SingleStatement.class, "SingleStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(letStatementEClass, LetStatement.class, "LetStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLetStatement_Name(), ecorePackage.getEString(), "name", null, 0, 1, LetStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(returnStatementEClass, ReturnStatement.class, "ReturnStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ifStatementEClass, IfStatement.class, "IfStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfStatement_Condition(), this.getFunctionAssignment(), null, "condition", null, 0, 1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStatement_ThenStatement(), this.getSingleStatement(), null, "thenStatement", null, 0, 1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStatement_ElseStatement(), this.getSingleStatement(), null, "elseStatement", null, 0, 1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forStatementEClass, ForStatement.class, "ForStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForStatement_InitVar(), this.getSingleStatement(), null, "initVar", null, 0, 1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForStatement_Condition(), this.getFunctionAssignment(), null, "condition", null, 0, 1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForStatement_EndProcessing(), this.getSingleStatement(), null, "endProcessing", null, 0, 1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForStatement_LoopExpr(), this.getSingleStatement(), null, "loopExpr", null, 0, 1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forLoopStatementEClass, ForLoopStatement.class, "ForLoopStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getForLoopStatement_Name(), ecorePackage.getEString(), "name", null, 0, 1, ForLoopStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForLoopStatement_Value(), this.getFunctionAssignment(), null, "value", null, 0, 1, ForLoopStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForLoopStatement_LoopExpr(), this.getSingleStatement(), null, "loopExpr", null, 0, 1, ForLoopStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(maybeValueEClass, MaybeValue.class, "MaybeValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMaybeValue_Value(), this.getFunctionAssignment(), null, "value", null, 0, 1, MaybeValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parDefEClass, ParDef.class, "ParDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getParDef_Params(), this.getFunctionParDef(), null, "params", null, 0, -1, ParDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionParDefEClass, FunctionParDef.class, "FunctionParDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionParDef_Name(), ecorePackage.getEString(), "name", null, 0, 1, FunctionParDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFunctionParDef_Type(), ecorePackage.getEString(), "type", null, 0, 1, FunctionParDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(calculatedValueEClass, CalculatedValue.class, "CalculatedValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ifThenElseEClass, IfThenElse.class, "IfThenElse", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfThenElse_Condition(), this.getFunctionAssignment(), null, "condition", null, 0, 1, IfThenElse.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfThenElse_ThenExpr(), this.getFunctionAssignment(), null, "thenExpr", null, 0, 1, IfThenElse.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfThenElse_ElseExpr(), this.getFunctionAssignment(), null, "elseExpr", null, 0, 1, IfThenElse.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionCallEClass, FunctionCall.class, "FunctionCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFunctionCall_Function(), this.getFunctionDef(), null, "function", null, 0, 1, FunctionCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(javaFunctionCallEClass, JavaFunctionCall.class, "JavaFunctionCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJavaFunctionCall_Function(), this.getJavaFunctionDef(), null, "function", null, 0, 1, JavaFunctionCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionParsEClass, FunctionPars.class, "FunctionPars", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFunctionPars_Params(), this.getFunctionPar(), null, "params", null, 0, -1, FunctionPars.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionParEClass, FunctionPar.class, "FunctionPar", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(objIdEClass, ObjId.class, "ObjId", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getObjId_Name(), ecorePackage.getEString(), "name", null, 0, 1, ObjId.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getObjId_Params(), this.getObjParam(), null, "params", null, 0, -1, ObjId.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(objParamEClass, ObjParam.class, "ObjParam", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getObjParam_Number(), ecorePackage.getEInt(), "number", null, 0, 1, ObjParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getObjParam_String(), ecorePackage.getEString(), "string", null, 0, 1, ObjParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getObjParam_Name(), ecorePackage.getEString(), "name", null, 0, 1, ObjParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getObjParam_Params(), this.getObjParam(), null, "params", null, 0, -1, ObjParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(functionTypeEEnum, FunctionType.class, "FunctionType");
    addEEnumLiteral(functionTypeEEnum, FunctionType.FINITE);
    addEEnumLiteral(functionTypeEEnum, FunctionType.DERIVE);
    addEEnumLiteral(functionTypeEEnum, FunctionType.CONSTRAINT);

    initEEnum(javaFunctionTypeEEnum, JavaFunctionType.class, "JavaFunctionType");
    addEEnumLiteral(javaFunctionTypeEEnum, JavaFunctionType.FUNCCALL);
    addEEnumLiteral(javaFunctionTypeEEnum, JavaFunctionType.CONSTRUCTOR);
    addEEnumLiteral(javaFunctionTypeEEnum, JavaFunctionType.OPERATION);

    // Create resource
    createResource(eNS_URI);
  }

} //VLangPackageImpl
