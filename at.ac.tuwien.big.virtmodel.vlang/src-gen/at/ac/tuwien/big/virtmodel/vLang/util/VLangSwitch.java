/**
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.virtmodel.vLang.util;

import at.ac.tuwien.big.virtmodel.vLang.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see at.ac.tuwien.big.virtmodel.vLang.VLangPackage
 * @generated
 */
public class VLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static VLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = VLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case VLangPackage.VLANG:
      {
        VLang vLang = (VLang)theEObject;
        T result = caseVLang(vLang);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.ASSIGN_STATEMENT:
      {
        AssignStatement assignStatement = (AssignStatement)theEObject;
        T result = caseAssignStatement(assignStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SET_OR_FUNCTION_DEF:
      {
        SetOrFunctionDef setOrFunctionDef = (SetOrFunctionDef)theEObject;
        T result = caseSetOrFunctionDef(setOrFunctionDef);
        if (result == null) result = caseAssignStatement(setOrFunctionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_DEF:
      {
        FunctionDef functionDef = (FunctionDef)theEObject;
        T result = caseFunctionDef(functionDef);
        if (result == null) result = caseSetOrFunctionDef(functionDef);
        if (result == null) result = caseAssignStatement(functionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.JAVA_FUNCTION_DEF:
      {
        JavaFunctionDef javaFunctionDef = (JavaFunctionDef)theEObject;
        T result = caseJavaFunctionDef(javaFunctionDef);
        if (result == null) result = caseAssignStatement(javaFunctionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.BASIC_ACTION:
      {
        BasicAction basicAction = (BasicAction)theEObject;
        T result = caseBasicAction(basicAction);
        if (result == null) result = caseAssignStatement(basicAction);
        if (result == null) result = caseFunctionPars(basicAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SET_DEF:
      {
        SetDef setDef = (SetDef)theEObject;
        T result = caseSetDef(setDef);
        if (result == null) result = caseSetOrFunctionDef(setDef);
        if (result == null) result = caseAssignStatement(setDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SET_LITERAL:
      {
        SetLiteral setLiteral = (SetLiteral)theEObject;
        T result = caseSetLiteral(setLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.RULE_ASSIGNMENT:
      {
        RuleAssignment ruleAssignment = (RuleAssignment)theEObject;
        T result = caseRuleAssignment(ruleAssignment);
        if (result == null) result = caseAssignStatement(ruleAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.DELETE_ASSIGNMENT:
      {
        DeleteAssignment deleteAssignment = (DeleteAssignment)theEObject;
        T result = caseDeleteAssignment(deleteAssignment);
        if (result == null) result = caseAssignStatement(deleteAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_SCOPE:
      {
        FunctionScope functionScope = (FunctionScope)theEObject;
        T result = caseFunctionScope(functionScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.INFINITE_SCOPE:
      {
        InfiniteScope infiniteScope = (InfiniteScope)theEObject;
        T result = caseInfiniteScope(infiniteScope);
        if (result == null) result = caseFunctionScope(infiniteScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FILTER:
      {
        Filter filter = (Filter)theEObject;
        T result = caseFilter(filter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_DOMAIN_SCOPE:
      {
        FunctionDomainScope functionDomainScope = (FunctionDomainScope)theEObject;
        T result = caseFunctionDomainScope(functionDomainScope);
        if (result == null) result = caseFunctionScope(functionDomainScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SET_SCOPE:
      {
        SetScope setScope = (SetScope)theEObject;
        T result = caseSetScope(setScope);
        if (result == null) result = caseFunctionScope(setScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SINGLE_SCOPE:
      {
        SingleScope singleScope = (SingleScope)theEObject;
        T result = caseSingleScope(singleScope);
        if (result == null) result = caseFunctionScope(singleScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SINGLE_VALUE:
      {
        SingleValue singleValue = (SingleValue)theEObject;
        T result = caseSingleValue(singleValue);
        if (result == null) result = caseBasicExpression(singleValue);
        if (result == null) result = caseExpression(singleValue);
        if (result == null) result = caseFunctionPar(singleValue);
        if (result == null) result = caseFunctionAssignment(singleValue);
        if (result == null) result = caseFilter(singleValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FIXED_VALUE:
      {
        FixedValue fixedValue = (FixedValue)theEObject;
        T result = caseFixedValue(fixedValue);
        if (result == null) result = caseSingleValue(fixedValue);
        if (result == null) result = caseBasicExpression(fixedValue);
        if (result == null) result = caseExpression(fixedValue);
        if (result == null) result = caseFunctionPar(fixedValue);
        if (result == null) result = caseFunctionAssignment(fixedValue);
        if (result == null) result = caseFilter(fixedValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_ASSIGNMENT:
      {
        FunctionAssignment functionAssignment = (FunctionAssignment)theEObject;
        T result = caseFunctionAssignment(functionAssignment);
        if (result == null) result = caseFilter(functionAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FULL_FUNCTION_ASSIGNMENT:
      {
        FullFunctionAssignment fullFunctionAssignment = (FullFunctionAssignment)theEObject;
        T result = caseFullFunctionAssignment(fullFunctionAssignment);
        if (result == null) result = caseFunctionAssignment(fullFunctionAssignment);
        if (result == null) result = caseFilter(fullFunctionAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.BASIC_EXPRESSION:
      {
        BasicExpression basicExpression = (BasicExpression)theEObject;
        T result = caseBasicExpression(basicExpression);
        if (result == null) result = caseFunctionAssignment(basicExpression);
        if (result == null) result = caseFilter(basicExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.OCL_FUNCTION:
      {
        OclFunction oclFunction = (OclFunction)theEObject;
        T result = caseOclFunction(oclFunction);
        if (result == null) result = caseBasicExpression(oclFunction);
        if (result == null) result = caseExpression(oclFunction);
        if (result == null) result = caseFunctionAssignment(oclFunction);
        if (result == null) result = caseFilter(oclFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FULL_FUNCTION:
      {
        FullFunction fullFunction = (FullFunction)theEObject;
        T result = caseFullFunction(fullFunction);
        if (result == null) result = caseExpression(fullFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseFullFunction(block);
        if (result == null) result = caseSingleStatement(block);
        if (result == null) result = caseExpression(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.SINGLE_STATEMENT:
      {
        SingleStatement singleStatement = (SingleStatement)theEObject;
        T result = caseSingleStatement(singleStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.LET_STATEMENT:
      {
        LetStatement letStatement = (LetStatement)theEObject;
        T result = caseLetStatement(letStatement);
        if (result == null) result = caseSingleStatement(letStatement);
        if (result == null) result = caseMaybeValue(letStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.RETURN_STATEMENT:
      {
        ReturnStatement returnStatement = (ReturnStatement)theEObject;
        T result = caseReturnStatement(returnStatement);
        if (result == null) result = caseSingleStatement(returnStatement);
        if (result == null) result = caseMaybeValue(returnStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseSingleStatement(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FOR_STATEMENT:
      {
        ForStatement forStatement = (ForStatement)theEObject;
        T result = caseForStatement(forStatement);
        if (result == null) result = caseSingleStatement(forStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FOR_LOOP_STATEMENT:
      {
        ForLoopStatement forLoopStatement = (ForLoopStatement)theEObject;
        T result = caseForLoopStatement(forLoopStatement);
        if (result == null) result = caseSingleStatement(forLoopStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.MAYBE_VALUE:
      {
        MaybeValue maybeValue = (MaybeValue)theEObject;
        T result = caseMaybeValue(maybeValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.PAR_DEF:
      {
        ParDef parDef = (ParDef)theEObject;
        T result = caseParDef(parDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_PAR_DEF:
      {
        FunctionParDef functionParDef = (FunctionParDef)theEObject;
        T result = caseFunctionParDef(functionParDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.CALCULATED_VALUE:
      {
        CalculatedValue calculatedValue = (CalculatedValue)theEObject;
        T result = caseCalculatedValue(calculatedValue);
        if (result == null) result = caseSingleValue(calculatedValue);
        if (result == null) result = caseBasicExpression(calculatedValue);
        if (result == null) result = caseExpression(calculatedValue);
        if (result == null) result = caseFunctionPar(calculatedValue);
        if (result == null) result = caseFunctionAssignment(calculatedValue);
        if (result == null) result = caseFilter(calculatedValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.IF_THEN_ELSE:
      {
        IfThenElse ifThenElse = (IfThenElse)theEObject;
        T result = caseIfThenElse(ifThenElse);
        if (result == null) result = caseCalculatedValue(ifThenElse);
        if (result == null) result = caseSingleValue(ifThenElse);
        if (result == null) result = caseBasicExpression(ifThenElse);
        if (result == null) result = caseExpression(ifThenElse);
        if (result == null) result = caseFunctionPar(ifThenElse);
        if (result == null) result = caseFunctionAssignment(ifThenElse);
        if (result == null) result = caseFilter(ifThenElse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = caseCalculatedValue(functionCall);
        if (result == null) result = caseFunctionPars(functionCall);
        if (result == null) result = caseSingleValue(functionCall);
        if (result == null) result = caseBasicExpression(functionCall);
        if (result == null) result = caseExpression(functionCall);
        if (result == null) result = caseFunctionPar(functionCall);
        if (result == null) result = caseFunctionAssignment(functionCall);
        if (result == null) result = caseFilter(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.JAVA_FUNCTION_CALL:
      {
        JavaFunctionCall javaFunctionCall = (JavaFunctionCall)theEObject;
        T result = caseJavaFunctionCall(javaFunctionCall);
        if (result == null) result = caseCalculatedValue(javaFunctionCall);
        if (result == null) result = caseFunctionPars(javaFunctionCall);
        if (result == null) result = caseSingleValue(javaFunctionCall);
        if (result == null) result = caseBasicExpression(javaFunctionCall);
        if (result == null) result = caseExpression(javaFunctionCall);
        if (result == null) result = caseFunctionPar(javaFunctionCall);
        if (result == null) result = caseFunctionAssignment(javaFunctionCall);
        if (result == null) result = caseFilter(javaFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_PARS:
      {
        FunctionPars functionPars = (FunctionPars)theEObject;
        T result = caseFunctionPars(functionPars);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.FUNCTION_PAR:
      {
        FunctionPar functionPar = (FunctionPar)theEObject;
        T result = caseFunctionPar(functionPar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.OBJ_ID:
      {
        ObjId objId = (ObjId)theEObject;
        T result = caseObjId(objId);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case VLangPackage.OBJ_PARAM:
      {
        ObjParam objParam = (ObjParam)theEObject;
        T result = caseObjParam(objParam);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VLang</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VLang</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVLang(VLang object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assign Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assign Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignStatement(AssignStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Or Function Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Or Function Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetOrFunctionDef(SetOrFunctionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDef(FunctionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Java Function Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Java Function Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJavaFunctionDef(JavaFunctionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicAction(BasicAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetDef(SetDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetLiteral(SetLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleAssignment(RuleAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteAssignment(DeleteAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionScope(FunctionScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infinite Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infinite Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfiniteScope(InfiniteScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilter(Filter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Domain Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Domain Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDomainScope(FunctionDomainScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetScope(SetScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleScope(SingleScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleValue(SingleValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fixed Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fixed Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFixedValue(FixedValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionAssignment(FunctionAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Full Function Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Full Function Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFullFunctionAssignment(FullFunctionAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicExpression(BasicExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclFunction(OclFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Full Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Full Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFullFunction(FullFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleStatement(SingleStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetStatement(LetStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnStatement(ReturnStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForStatement(ForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Loop Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Loop Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForLoopStatement(ForLoopStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Maybe Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Maybe Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaybeValue(MaybeValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Par Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Par Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParDef(ParDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Par Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Par Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionParDef(FunctionParDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Calculated Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Calculated Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCalculatedValue(CalculatedValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Then Else</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Then Else</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfThenElse(IfThenElse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Java Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Java Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJavaFunctionCall(JavaFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Pars</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Pars</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionPars(FunctionPars object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Par</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Par</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionPar(FunctionPar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Obj Id</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Obj Id</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjId(ObjId object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Obj Param</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Obj Param</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjParam(ObjParam object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //VLangSwitch
