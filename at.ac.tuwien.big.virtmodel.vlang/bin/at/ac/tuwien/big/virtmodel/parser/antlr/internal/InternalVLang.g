/*
 * generated by Xtext 2.11.0
 */
grammar InternalVLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package at.ac.tuwien.big.virtmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.tuwien.big.virtmodel.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.tuwien.big.virtmodel.services.VLangGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private VLangGrammarAccess grammarAccess;

    public InternalVLangParser(TokenStream input, VLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "VLang";
   	}

   	@Override
   	protected VLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVLang
entryRuleVLang returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLangRule()); }
	iv_ruleVLang=ruleVLang
	{ $current=$iv_ruleVLang.current; }
	EOF;

// Rule VLang
ruleVLang returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVLangAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLangRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"at.ac.tuwien.big.virtmodel.VLang.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getVLangAccess().getStatementAssignStatementParserRuleCall_1_0());
				}
				lv_statement_1_0=ruleAssignStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLangRule());
					}
					add(
						$current,
						"statement",
						lv_statement_1_0,
						"at.ac.tuwien.big.virtmodel.VLang.AssignStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_target_1_0=RULE_ESTRING
				{
					newLeafNode(lv_target_1_0, grammarAccess.getImportAccess().getTargetESTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"target",
						lv_target_1_0,
						"at.ac.tuwien.big.virtmodel.VLang.ESTRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignStatement
entryRuleAssignStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignStatementRule()); }
	iv_ruleAssignStatement=ruleAssignStatement
	{ $current=$iv_ruleAssignStatement.current; }
	EOF;

// Rule AssignStatement
ruleAssignStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAssignStatementAccess().getJavaFunctionDefParserRuleCall_0_0());
			}
			this_JavaFunctionDef_0=ruleJavaFunctionDef
			{
				$current = $this_JavaFunctionDef_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAssignStatementAccess().getSetOrFunctionDefParserRuleCall_0_1());
			}
			this_SetOrFunctionDef_1=ruleSetOrFunctionDef
			{
				$current = $this_SetOrFunctionDef_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAssignStatementAccess().getRuleAssignmentParserRuleCall_0_2());
			}
			this_RuleAssignment_2=ruleRuleAssignment
			{
				$current = $this_RuleAssignment_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAssignStatementAccess().getBasicActionParserRuleCall_0_3());
			}
			this_BasicAction_3=ruleBasicAction
			{
				$current = $this_BasicAction_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAssignStatementAccess().getDeleteAssignmentParserRuleCall_0_4());
			}
			this_DeleteAssignment_4=ruleDeleteAssignment
			{
				$current = $this_DeleteAssignment_4.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAssignStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleSetOrFunctionDef
entryRuleSetOrFunctionDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetOrFunctionDefRule()); }
	iv_ruleSetOrFunctionDef=ruleSetOrFunctionDef
	{ $current=$iv_ruleSetOrFunctionDef.current; }
	EOF;

// Rule SetOrFunctionDef
ruleSetOrFunctionDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSetOrFunctionDefAccess().getSetDefParserRuleCall_0());
		}
		this_SetDef_0=ruleSetDef
		{
			$current = $this_SetDef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSetOrFunctionDefAccess().getFunctionDefParserRuleCall_1());
		}
		this_FunctionDef_1=ruleFunctionDef
		{
			$current = $this_FunctionDef_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionDef
entryRuleFunctionDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefRule()); }
	iv_ruleFunctionDef=ruleFunctionDef
	{ $current=$iv_ruleFunctionDef.current; }
	EOF;

// Rule FunctionDef
ruleFunctionDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefAccess().getTypeFunctionTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleFunctionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='function'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDefAccess().getFunctionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFunctionDefAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':='
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDefAccess().getColonEqualsSignKeyword_3());
		}
		otherlv_4='new'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionDefAccess().getNewKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefAccess().getInitJavaFunctionCallParserRuleCall_5_0());
				}
				lv_init_5_0=ruleJavaFunctionCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefRule());
					}
					set(
						$current,
						"init",
						lv_init_5_0,
						"at.ac.tuwien.big.virtmodel.VLang.JavaFunctionCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getFunctionDefAccess().getEqualsSignKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefAccess().getFullAssignmentFunctionAssignmentParserRuleCall_6_1_0());
					}
					lv_fullAssignment_7_0=ruleFunctionAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefRule());
						}
						set(
							$current,
							"fullAssignment",
							lv_fullAssignment_7_0,
							"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleJavaFunctionDef
entryRuleJavaFunctionDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaFunctionDefRule()); }
	iv_ruleJavaFunctionDef=ruleJavaFunctionDef
	{ $current=$iv_ruleJavaFunctionDef.current; }
	EOF;

// Rule JavaFunctionDef
ruleJavaFunctionDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJavaFunctionDefAccess().getTypeJavaFunctionTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleJavaFunctionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJavaFunctionDefRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"at.ac.tuwien.big.virtmodel.VLang.JavaFunctionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJavaFunctionDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaFunctionDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getJavaFunctionDefAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_javaFunc_3_0=RULE_ESTRING
				{
					newLeafNode(lv_javaFunc_3_0, grammarAccess.getJavaFunctionDefAccess().getJavaFuncESTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaFunctionDefRule());
					}
					setWithLastConsumed(
						$current,
						"javaFunc",
						lv_javaFunc_3_0,
						"at.ac.tuwien.big.virtmodel.VLang.ESTRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBasicAction
entryRuleBasicAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicActionRule()); }
	iv_ruleBasicAction=ruleBasicAction
	{ $current=$iv_ruleBasicAction.current; }
	EOF;

// Rule BasicAction
ruleBasicAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicActionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getBasicActionAccess().getThingSetOrFunctionDefCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getBasicActionAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_calledFunc_2_0=RULE_ID
				{
					newLeafNode(lv_calledFunc_2_0, grammarAccess.getBasicActionAccess().getCalledFuncIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicActionRule());
					}
					setWithLastConsumed(
						$current,
						"calledFunc",
						lv_calledFunc_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			/* */
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getBasicActionRule());
			}
			newCompositeNode(grammarAccess.getBasicActionAccess().getFunctionParsParserRuleCall_3());
		}
		this_FunctionPars_3=ruleFunctionPars[$current]
		{
			$current = $this_FunctionPars_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetDef
entryRuleSetDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetDefRule()); }
	iv_ruleSetDef=ruleSetDef
	{ $current=$iv_ruleSetDef.current; }
	EOF;

// Rule SetDef
ruleSetDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetDefAccess().getSetKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSetDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getSetDefAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetDefAccess().getLiteralSetLiteralParserRuleCall_2_1_0());
					}
					lv_literal_3_0=ruleSetLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetDefRule());
						}
						set(
							$current,
							"literal",
							lv_literal_3_0,
							"at.ac.tuwien.big.virtmodel.VLang.SetLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	iv_ruleSetLiteral=ruleSetLiteral
	{ $current=$iv_ruleSetLiteral.current; }
	EOF;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetLiteralAccess().getSetLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSetLiteralAccess().getValuesFixedValueParserRuleCall_2_0_0());
					}
					lv_values_2_0=ruleFixedValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetLiteralRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"at.ac.tuwien.big.virtmodel.VLang.FixedValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSetLiteralAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSetLiteralAccess().getValuesFixedValueParserRuleCall_2_1_1_0());
						}
						lv_values_4_0=ruleFixedValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSetLiteralRule());
							}
							add(
								$current,
								"values",
								lv_values_4_0,
								"at.ac.tuwien.big.virtmodel.VLang.FixedValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRuleAssignment
entryRuleRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleAssignmentRule()); }
	iv_ruleRuleAssignment=ruleRuleAssignment
	{ $current=$iv_ruleRuleAssignment.current; }
	EOF;

// Rule RuleAssignment
ruleRuleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getRuleAssignmentAccess().getFunctionFunctionDefCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAssignmentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAssignmentAccess().getScopeFunctionScopeParserRuleCall_2_0());
				}
				lv_scope_2_0=ruleFunctionScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleAssignmentRule());
					}
					set(
						$current,
						"scope",
						lv_scope_2_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionScope");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAssignmentAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				(
					lv_isFinite_4_0=':='
					{
						newLeafNode(lv_isFinite_4_0, grammarAccess.getRuleAssignmentAccess().getIsFiniteColonEqualsSignKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleAssignmentRule());
						}
						setWithLastConsumed($current, "isFinite", true, ":=");
					}
				)
			)
			    |
			(
				(
					lv_isDerive_5_0='='
					{
						newLeafNode(lv_isDerive_5_0, grammarAccess.getRuleAssignmentAccess().getIsDeriveEqualsSignKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleAssignmentRule());
						}
						setWithLastConsumed($current, "isDerive", true, "=");
					}
				)
			)
			    |
			(
				(
					lv_isConstraint_6_0='=='
					{
						newLeafNode(lv_isConstraint_6_0, grammarAccess.getRuleAssignmentAccess().getIsConstraintEqualsSignEqualsSignKeyword_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleAssignmentRule());
						}
						setWithLastConsumed($current, "isConstraint", true, "==");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAssignmentAccess().getAssignmentFunctionAssignmentParserRuleCall_5_0());
				}
				lv_assignment_7_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleAssignmentRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_7_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeleteAssignment
entryRuleDeleteAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteAssignmentRule()); }
	iv_ruleDeleteAssignment=ruleDeleteAssignment
	{ $current=$iv_ruleDeleteAssignment.current; }
	EOF;

// Rule DeleteAssignment
ruleDeleteAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteAssignmentAccess().getDeleteKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeleteAssignmentRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDeleteAssignmentAccess().getFunctionFunctionDefCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDeleteAssignmentAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteAssignmentAccess().getScopeFunctionScopeParserRuleCall_3_0());
				}
				lv_scope_3_0=ruleFunctionScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteAssignmentRule());
					}
					set(
						$current,
						"scope",
						lv_scope_3_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionScope");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeleteAssignmentAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctionScope
entryRuleFunctionScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionScopeRule()); }
	iv_ruleFunctionScope=ruleFunctionScope
	{ $current=$iv_ruleFunctionScope.current; }
	EOF;

// Rule FunctionScope
ruleFunctionScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getFunctionScopeAccess().getSingleScopeParserRuleCall_0_0());
			}
			this_SingleScope_0=ruleSingleScope
			{
				$current = $this_SingleScope_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getFunctionScopeAccess().getFunctionDomainScopeParserRuleCall_0_1());
			}
			this_FunctionDomainScope_1=ruleFunctionDomainScope
			{
				$current = $this_FunctionDomainScope_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getFunctionScopeAccess().getSetScopeParserRuleCall_0_2());
			}
			this_SetScope_2=ruleSetScope
			{
				$current = $this_SetScope_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getFunctionScopeAccess().getInfiniteScopeParserRuleCall_0_3());
			}
			this_InfiniteScope_3=ruleInfiniteScope
			{
				$current = $this_InfiniteScope_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_4='with'
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionScopeAccess().getWithKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionScopeAccess().getFilterFilterParserRuleCall_1_1_0());
					}
					lv_filter_5_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionScopeRule());
						}
						set(
							$current,
							"filter",
							lv_filter_5_0,
							"at.ac.tuwien.big.virtmodel.VLang.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleInfiniteScope
entryRuleInfiniteScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfiniteScopeRule()); }
	iv_ruleInfiniteScope=ruleInfiniteScope
	{ $current=$iv_ruleInfiniteScope.current; }
	EOF;

// Rule InfiniteScope
ruleInfiniteScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getInfiniteScopeAccess().getInfiniteScopeAction_0(),
					$current);
			}
		)
		otherlv_1='all'
		{
			newLeafNode(otherlv_1, grammarAccess.getInfiniteScopeAccess().getAllKeyword_1());
		}
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getFilterAccess().getFunctionAssignmentParserRuleCall());
	}
	this_FunctionAssignment_0=ruleFunctionAssignment
	{
		$current = $this_FunctionAssignment_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunctionDomainScope
entryRuleFunctionDomainScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDomainScopeRule()); }
	iv_ruleFunctionDomainScope=ruleFunctionDomainScope
	{ $current=$iv_ruleFunctionDomainScope.current; }
	EOF;

// Rule FunctionDomainScope
ruleFunctionDomainScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDomainScopeAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDomainScopeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFunctionDomainScopeAccess().getFunctionFunctionDefCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSetScope
entryRuleSetScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetScopeRule()); }
	iv_ruleSetScope=ruleSetScope
	{ $current=$iv_ruleSetScope.current; }
	EOF;

// Rule SetScope
ruleSetScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetScopeAccess().getAmpersandKeyword_0());
		}
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetScopeRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getSetScopeAccess().getSetRefSetDefCrossReference_1_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSetScopeAccess().getSetSetLiteralParserRuleCall_1_1_0());
					}
					lv_set_2_0=ruleSetLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetScopeRule());
						}
						set(
							$current,
							"set",
							lv_set_2_0,
							"at.ac.tuwien.big.virtmodel.VLang.SetLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSingleScope
entryRuleSingleScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleScopeRule()); }
	iv_ruleSingleScope=ruleSingleScope
	{ $current=$iv_ruleSingleScope.current; }
	EOF;

// Rule SingleScope
ruleSingleScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSingleScopeAccess().getValueSingleValueParserRuleCall_0());
			}
			lv_value_0_0=ruleSingleValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSingleScopeRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"at.ac.tuwien.big.virtmodel.VLang.SingleValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSingleValue
entryRuleSingleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleValueRule()); }
	iv_ruleSingleValue=ruleSingleValue
	{ $current=$iv_ruleSingleValue.current; }
	EOF;

// Rule SingleValue
ruleSingleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleValueAccess().getFixedValueParserRuleCall_0());
		}
		this_FixedValue_0=ruleFixedValue
		{
			$current = $this_FixedValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleValueAccess().getCalculatedValueParserRuleCall_1());
		}
		this_CalculatedValue_1=ruleCalculatedValue
		{
			$current = $this_CalculatedValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFixedValue
entryRuleFixedValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixedValueRule()); }
	iv_ruleFixedValue=ruleFixedValue
	{ $current=$iv_ruleFixedValue.current; }
	EOF;

// Rule FixedValue
ruleFixedValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_number_0_0=RULE_INT
				{
					newLeafNode(lv_number_0_0, grammarAccess.getFixedValueAccess().getNumberINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFixedValueRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_string_1_0=RULE_STRING
				{
					newLeafNode(lv_string_1_0, grammarAccess.getFixedValueAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFixedValueRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFixedValueAccess().getObjidObjIdParserRuleCall_2_0());
				}
				lv_objid_2_0=ruleObjId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFixedValueRule());
					}
					set(
						$current,
						"objid",
						lv_objid_2_0,
						"at.ac.tuwien.big.virtmodel.VLang.ObjId");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionAssignment
entryRuleFunctionAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionAssignmentRule()); }
	iv_ruleFunctionAssignment=ruleFunctionAssignment
	{ $current=$iv_ruleFunctionAssignment.current; }
	EOF;

// Rule FunctionAssignment
ruleFunctionAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAssignmentAccess().getFullFunctionAssignmentParserRuleCall_0());
		}
		this_FullFunctionAssignment_0=ruleFullFunctionAssignment
		{
			$current = $this_FullFunctionAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFunctionAssignmentAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFullFunctionAssignment
entryRuleFullFunctionAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullFunctionAssignmentRule()); }
	iv_ruleFullFunctionAssignment=ruleFullFunctionAssignment
	{ $current=$iv_ruleFullFunctionAssignment.current; }
	EOF;

// Rule FullFunctionAssignment
ruleFullFunctionAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFullFunctionAssignmentAccess().getParametersParDefParserRuleCall_0_0_0());
					}
					lv_parameters_0_0=ruleParDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFullFunctionAssignmentRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_0_0,
							"at.ac.tuwien.big.virtmodel.VLang.ParDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getFullFunctionAssignmentAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFullFunctionAssignmentAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFullFunctionAssignmentRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"at.ac.tuwien.big.virtmodel.VLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSingleValueParserRuleCall_0());
		}
		this_SingleValue_0=ruleSingleValue
		{
			$current = $this_SingleValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFullFunctionParserRuleCall_1());
		}
		this_FullFunction_1=ruleFullFunction
		{
			$current = $this_FullFunction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getOclFunctionParserRuleCall_2());
		}
		this_OclFunction_2=ruleOclFunction
		{
			$current = $this_OclFunction_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOclFunction
entryRuleOclFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclFunctionRule()); }
	iv_ruleOclFunction=ruleOclFunction
	{ $current=$iv_ruleOclFunction.current; }
	EOF;

// Rule OclFunction
ruleOclFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ocl'
		{
			newLeafNode(otherlv_0, grammarAccess.getOclFunctionAccess().getOclKeyword_0());
		}
		(
			(
				lv_oclFunc_1_0=RULE_STRING
				{
					newLeafNode(lv_oclFunc_1_0, grammarAccess.getOclFunctionAccess().getOclFuncSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"oclFunc",
						lv_oclFunc_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFullFunction
entryRuleFullFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullFunctionRule()); }
	iv_ruleFullFunction=ruleFullFunction
	{ $current=$iv_ruleFullFunction.current; }
	EOF;

// Rule FullFunction
ruleFullFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getFullFunctionAccess().getBlockParserRuleCall());
	}
	this_Block_0=ruleBlock
	{
		$current = $this_Block_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBlockAccess().getStatementsSingleStatementParserRuleCall_2_0_0_0());
						}
						lv_statements_2_0=ruleSingleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBlockRule());
							}
							add(
								$current,
								"statements",
								lv_statements_2_0,
								"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getSemicolonKeyword_2_0_1());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementsBlockParserRuleCall_2_1_0());
					}
					lv_statements_4_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"statements",
							lv_statements_4_0,
							"at.ac.tuwien.big.virtmodel.VLang.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSingleStatement
entryRuleSingleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleStatementRule()); }
	iv_ruleSingleStatement=ruleSingleStatement
	{ $current=$iv_ruleSingleStatement.current; }
	EOF;

// Rule SingleStatement
ruleSingleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleStatementAccess().getLetStatementParserRuleCall_0());
		}
		this_LetStatement_0=ruleLetStatement
		{
			$current = $this_LetStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleStatementAccess().getBlockParserRuleCall_1());
		}
		this_Block_1=ruleBlock
		{
			$current = $this_Block_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleStatementAccess().getReturnStatementParserRuleCall_2());
		}
		this_ReturnStatement_2=ruleReturnStatement
		{
			$current = $this_ReturnStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleStatementAccess().getIfStatementParserRuleCall_3());
		}
		this_IfStatement_3=ruleIfStatement
		{
			$current = $this_IfStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleStatementAccess().getForStatementParserRuleCall_4());
		}
		this_ForStatement_4=ruleForStatement
		{
			$current = $this_ForStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleStatementAccess().getForLoopStatementParserRuleCall_5());
		}
		this_ForLoopStatement_5=ruleForLoopStatement
		{
			$current = $this_ForLoopStatement_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLetStatement
entryRuleLetStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetStatementRule()); }
	iv_ruleLetStatement=ruleLetStatement
	{ $current=$iv_ruleLetStatement.current; }
	EOF;

// Rule LetStatement
ruleLetStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getLetStatementAccess().getLetKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLetStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLetStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLetStatementRule());
				}
				newCompositeNode(grammarAccess.getLetStatementAccess().getMaybeValueParserRuleCall_2());
			}
			this_MaybeValue_2=ruleMaybeValue[$current]
			{
				$current = $this_MaybeValue_2.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
		}
		{
			/* */
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getReturnStatementRule());
			}
			newCompositeNode(grammarAccess.getReturnStatementAccess().getMaybeValueParserRuleCall_1());
		}
		this_MaybeValue_1=ruleMaybeValue[$current]
		{
			$current = $this_MaybeValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionFunctionAssignmentParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenStatementSingleStatementParserRuleCall_4_0());
				}
				lv_thenStatement_4_0=ruleSingleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"thenStatement",
						lv_thenStatement_4_0,
						"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementSingleStatementParserRuleCall_5_1_0());
					}
					lv_elseStatement_6_0=ruleSingleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"elseStatement",
							lv_elseStatement_6_0,
							"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getInitVarSingleStatementParserRuleCall_2_0());
				}
				lv_initVar_2_0=ruleSingleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"initVar",
						lv_initVar_2_0,
						"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getConditionFunctionAssignmentParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getEndProcessingSingleStatementParserRuleCall_6_0());
				}
				lv_endProcessing_6_0=ruleSingleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"endProcessing",
						lv_endProcessing_6_0,
						"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getLoopExprSingleStatementParserRuleCall_8_0());
				}
				lv_loopExpr_8_0=ruleSingleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"loopExpr",
						lv_loopExpr_8_0,
						"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForLoopStatement
entryRuleForLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopStatementRule()); }
	iv_ruleForLoopStatement=ruleForLoopStatement
	{ $current=$iv_ruleForLoopStatement.current; }
	EOF;

// Rule ForLoopStatement
ruleForLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForLoopStatementAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForLoopStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getForLoopStatementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getForLoopStatementAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopStatementAccess().getValueFunctionAssignmentParserRuleCall_4_0());
				}
				lv_value_4_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getForLoopStatementAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopStatementAccess().getLoopExprSingleStatementParserRuleCall_6_0());
				}
				lv_loopExpr_6_0=ruleSingleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopStatementRule());
					}
					set(
						$current,
						"loopExpr",
						lv_loopExpr_6_0,
						"at.ac.tuwien.big.virtmodel.VLang.SingleStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;


// Rule MaybeValue
ruleMaybeValue[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='='
		{
			newLeafNode(otherlv_0, grammarAccess.getMaybeValueAccess().getEqualsSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMaybeValueAccess().getValueFunctionAssignmentParserRuleCall_1_0());
				}
				lv_value_1_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMaybeValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParDef
entryRuleParDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParDefRule()); }
	iv_ruleParDef=ruleParDef
	{ $current=$iv_ruleParDef.current; }
	EOF;

// Rule ParDef
ruleParDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getParDefAccess().getParDefAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParDefAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParDefAccess().getParamsFunctionParDefParserRuleCall_2_0_0());
					}
					lv_params_2_0=ruleFunctionParDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParDefRule());
						}
						add(
							$current,
							"params",
							lv_params_2_0,
							"at.ac.tuwien.big.virtmodel.VLang.FunctionParDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getParDefAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParDefAccess().getParamsFunctionParDefParserRuleCall_2_1_1_0());
						}
						lv_params_4_0=ruleFunctionParDef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParDefRule());
							}
							add(
								$current,
								"params",
								lv_params_4_0,
								"at.ac.tuwien.big.virtmodel.VLang.FunctionParDef");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParDefAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionParDef
entryRuleFunctionParDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionParDefRule()); }
	iv_ruleFunctionParDef=ruleFunctionParDef
	{ $current=$iv_ruleFunctionParDef.current; }
	EOF;

// Rule FunctionParDef
ruleFunctionParDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunctionParDefAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionParDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionParDefAccess().getColonKeyword_1_0());
			}
			(
				(
					lv_type_2_0=RULE_ID
					{
						newLeafNode(lv_type_2_0, grammarAccess.getFunctionParDefAccess().getTypeIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionParDefRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCalculatedValue
entryRuleCalculatedValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculatedValueRule()); }
	iv_ruleCalculatedValue=ruleCalculatedValue
	{ $current=$iv_ruleCalculatedValue.current; }
	EOF;

// Rule CalculatedValue
ruleCalculatedValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculatedValueAccess().getFunctionCallParserRuleCall_0());
		}
		this_FunctionCall_0=ruleFunctionCall
		{
			$current = $this_FunctionCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCalculatedValueAccess().getIfThenElseParserRuleCall_1());
		}
		this_IfThenElse_1=ruleIfThenElse
		{
			$current = $this_IfThenElse_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	iv_ruleIfThenElse=ruleIfThenElse
	{ $current=$iv_ruleIfThenElse.current; }
	EOF;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfThenElseAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseAccess().getConditionFunctionAssignmentParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfThenElseAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseAccess().getThenExprFunctionAssignmentParserRuleCall_3_0());
				}
				lv_thenExpr_3_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseRule());
					}
					set(
						$current,
						"thenExpr",
						lv_thenExpr_3_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfThenElseAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseAccess().getElseExprFunctionAssignmentParserRuleCall_5_0());
				}
				lv_elseExpr_5_0=ruleFunctionAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseRule());
					}
					set(
						$current,
						"elseExpr",
						lv_elseExpr_5_0,
						"at.ac.tuwien.big.virtmodel.VLang.FunctionAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='endif'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfThenElseAccess().getEndifKeyword_6());
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getFunctionFunctionDefCrossReference_0_0());
				}
			)
		)
		{
			/* */
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getFunctionCallRule());
			}
			newCompositeNode(grammarAccess.getFunctionCallAccess().getFunctionParsParserRuleCall_1());
		}
		this_FunctionPars_1=ruleFunctionPars[$current]
		{
			$current = $this_FunctionPars_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJavaFunctionCall
entryRuleJavaFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaFunctionCallRule()); }
	iv_ruleJavaFunctionCall=ruleJavaFunctionCall
	{ $current=$iv_ruleJavaFunctionCall.current; }
	EOF;

// Rule JavaFunctionCall
ruleJavaFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='$'
		{
			newLeafNode(otherlv_0, grammarAccess.getJavaFunctionCallAccess().getDollarSignKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaFunctionCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getJavaFunctionCallAccess().getFunctionJavaFunctionDefCrossReference_1_0());
				}
			)
		)
		{
			/* */
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getJavaFunctionCallRule());
			}
			newCompositeNode(grammarAccess.getJavaFunctionCallAccess().getFunctionParsParserRuleCall_2());
		}
		this_FunctionPars_2=ruleFunctionPars[$current]
		{
			$current = $this_FunctionPars_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;


// Rule FunctionPars
ruleFunctionPars[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionParsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionParsAccess().getParamsFunctionParParserRuleCall_1_0_0());
					}
					lv_params_1_0=ruleFunctionPar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionParsRule());
						}
						add(
							$current,
							"params",
							lv_params_1_0,
							"at.ac.tuwien.big.virtmodel.VLang.FunctionPar");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getFunctionParsAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionParsAccess().getParamsFunctionParParserRuleCall_1_1_1_0());
						}
						lv_params_3_0=ruleFunctionPar
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionParsRule());
							}
							add(
								$current,
								"params",
								lv_params_3_0,
								"at.ac.tuwien.big.virtmodel.VLang.FunctionPar");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionParsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleFunctionPar
entryRuleFunctionPar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionParRule()); }
	iv_ruleFunctionPar=ruleFunctionPar
	{ $current=$iv_ruleFunctionPar.current; }
	EOF;

// Rule FunctionPar
ruleFunctionPar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getFunctionParAccess().getSingleValueParserRuleCall());
	}
	this_SingleValue_0=ruleSingleValue
	{
		$current = $this_SingleValue_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleObjId
entryRuleObjId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjIdRule()); }
	iv_ruleObjId=ruleObjId
	{ $current=$iv_ruleObjId.current; }
	EOF;

// Rule ObjId
ruleObjId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getObjIdAccess().getNumberSignKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjIdAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjIdRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getObjIdAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getObjIdAccess().getParamsObjParamParserRuleCall_2_1_0_0());
						}
						lv_params_3_0=ruleObjParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getObjIdRule());
							}
							add(
								$current,
								"params",
								lv_params_3_0,
								"at.ac.tuwien.big.virtmodel.VLang.ObjParam");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getObjIdAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getObjIdAccess().getParamsObjParamParserRuleCall_2_1_1_1_0());
							}
							lv_params_5_0=ruleObjParam
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getObjIdRule());
								}
								add(
									$current,
									"params",
									lv_params_5_0,
									"at.ac.tuwien.big.virtmodel.VLang.ObjParam");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getObjIdAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleObjParam
entryRuleObjParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjParamRule()); }
	iv_ruleObjParam=ruleObjParam
	{ $current=$iv_ruleObjParam.current; }
	EOF;

// Rule ObjParam
ruleObjParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_number_0_0=RULE_INT
				{
					newLeafNode(lv_number_0_0, grammarAccess.getObjParamAccess().getNumberINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjParamRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_string_1_0=RULE_STRING
				{
					newLeafNode(lv_string_1_0, grammarAccess.getObjParamAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjParamRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getObjParamAccess().getNameIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjParamRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getObjParamAccess().getLeftParenthesisKeyword_2_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getObjParamAccess().getParamsObjParamParserRuleCall_2_1_1_0_0());
							}
							lv_params_4_0=ruleObjParam
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getObjParamRule());
								}
								add(
									$current,
									"params",
									lv_params_4_0,
									"at.ac.tuwien.big.virtmodel.VLang.ObjParam");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_5=','
						{
							newLeafNode(otherlv_5, grammarAccess.getObjParamAccess().getCommaKeyword_2_1_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getObjParamAccess().getParamsObjParamParserRuleCall_2_1_1_1_1_0());
								}
								lv_params_6_0=ruleObjParam
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjParamRule());
									}
									add(
										$current,
										"params",
										lv_params_6_0,
										"at.ac.tuwien.big.virtmodel.VLang.ObjParam");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getObjParamAccess().getRightParenthesisKeyword_2_1_2());
				}
			)?
		)
	)
;

// Rule FunctionType
ruleFunctionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='finite'
			{
				$current = grammarAccess.getFunctionTypeAccess().getFINITEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFunctionTypeAccess().getFINITEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='derive'
			{
				$current = grammarAccess.getFunctionTypeAccess().getDERIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFunctionTypeAccess().getDERIVEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='constraint'
			{
				$current = grammarAccess.getFunctionTypeAccess().getCONSTRAINTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFunctionTypeAccess().getCONSTRAINTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule JavaFunctionType
ruleJavaFunctionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='jfunc'
			{
				$current = grammarAccess.getJavaFunctionTypeAccess().getFUNCCALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJavaFunctionTypeAccess().getFUNCCALLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='jcons'
			{
				$current = grammarAccess.getJavaFunctionTypeAccess().getCONSTRUCTOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJavaFunctionTypeAccess().getCONSTRUCTOREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='jop'
			{
				$current = grammarAccess.getJavaFunctionTypeAccess().getOPERATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJavaFunctionTypeAccess().getOPERATIONEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ESTRING : (RULE_ID|RULE_STRING);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
